stack:
  enabled: true
  name: tink-stack
  service:
    enabled: true
    type: LoadBalancer
  selector:
    app: tink-stack
  nodeSelector: {}
  deployment:
    strategy:
      type: RollingUpdate
  # stack needs to resolve DNS names in the cluster (in .svc.clusterDomain)
  clusterDomain: cluster.local
  # loadBalancerIP will override the global.publicIP value if set
  # loadBalancerIP: 192.168.2.112
  lbClass: kube-vip.io/kube-vip-class
  # Once the Kubernetes Gateway API is more stable, we will use that for all services instead of nginx.
  image: nginx:1.25.1
  

  hook:
    enabled: true
    name: hook-files
    port: 8080
    image: bash
    downloadsDest: /opt/hook
    # downloadURL only works with the > 0.8.1 Hook release because
    # previous Hook versions didn't provide a checksum file.
    downloadURL: https://github.com/tinkerbell/hook/releases/download/v0.9.1
    persistence:
      enabled: true
      # type must be either "hostpath" or "pvc"
      # hostpath: only works on a single worker node cluster
      # https://kubernetes.io/docs/concepts/storage/volumes/#hostpath
      type: hostpath

      # The PVC storage class to use. Only valid with type=pvc.
      # storageClassName: default

      pvc:
        # PVC accessModes : 
        # If you include only ReadWriteMany access mode it will allow to download Hook artifacts,
        # it will also allow to scale up stack deployment on multinode cluster.
        # If ReadWriteOnce is included, you will need to download manually Hook artifacts into
        # stack Pod (/usr/share/nginx/html/).
        # https://kubernetes.io/docs/concepts/storage/persistent-volumes/#access-modes
        accessModes:
          - ReadWriteMany
        size: 1Gi
        # Annotations to include on the PVC object.
        annotations: {}

        # An optional selector to narrow the Volumes considered for binding to the PVC.
        # Should be structured the same as a raw PVC selector (see documentation for more info).
        #
        # https://kubernetes.io/docs/concepts/storage/persistent-volumes/#selector.
        selector: {}

        # existingClaim:
        extraLabels: {}

  kubevip:
    enabled: true
    name: kube-vip
    image: ghcr.io/kube-vip/kube-vip:v0.7.2
    imagePullPolicy: IfNotPresent
    roleName: kube-vip-role
    roleBindingName: kube-vip-rolebinding
    # Customize the interface KubeVIP advertises on. When unset, KubeVIP will autodetect the interface.
    # interface: enp0s8

    # Additional environment variables to pass to the kubevip container. Each entry is expected to have a
    # name and value key. Some keys are already defined - refer to the deployment.yaml template for
    # details.
    #
    # Example
    #   - name: MY_ENV_VAR
    #     value: my-value
    additionalEnv: []
  # Relay allows us to listen and respond to layer broadcast DHCP requests
  relay:
    name: dhcp-relay
    enabled: true
    # This image (ghcr.io/jacobweinstock/dhcrelay) is used because the other public dhcprelay images out there (`modem7/dhcprelay`)
    # don't respect signals properly when run as PID 1.
    image: ghcr.io/jacobweinstock/dhcprelay # dhcprelay is a multiarch-enabled version of dhcrelay
    # if `interfaceMode: ipvlan`, then ghcr.io/jacobweinstock/relay-init:v0.1.0 (has nmap and nmap-scripts) is required. Otherwise, alpine can be used. 
    initImage: ghcr.io/jacobweinstock/relay-init:v0.1.0
    maxHopCount: 10
    # The presentGiaddrAction pertains to the course of action when the giaddr field appears in the DHCP packet.
    # In situations where another DHCP relay agent is already in operation within the environment,
    # maintaining option (82) in its received state from the dhcrelay might be essential.
    # This behavior can be regulated by configuring the presentGiaddrAction as "forward."
    # Additional information is available at: https://linux.die.net/man/8/dhcrelay
    presentGiaddrAction: forward
    # sourceInterface is the Host/Node interface to use for listening for DHCP broadcast packets.
    # When unset, the interface from the default route will be used.
    # sourceInterface: eno1
    # enable/disable listening for broadcast traffic. Useful when the environment employs DHCP relay agent(s).
    # default is true.
    listenBroadcastTraffic: true
    # interfaceMode determines how we create the interface needed to listen for DHCP broadcast traffic.
    # by default macvlan is used. ipvlan is the only other option.
    interfaceMode: macvlan
  # singleNodeClusterConfig to add tolerations for deployments on control plane nodes. This is defaulted to false.
  singleNodeClusterConfig:
    controlPlaneTolerationsEnabled: false
    nodeAffinityWeight: 1

# -- Overrides
# The values defined here override those in the individual charts. Some of them require tweaking
# before deployment as they are environment dependent; others are surfaced for convenience.
#
# See individual chart documentation for additional detail.

smee:
  image: quay.io/tinkerbell/smee:v0.13.0
  tinkWorkerImage: quay.io/tinkerbell/tink-worker:v0.11.0

hegel:
  image: quay.io/tinkerbell/hegel:v0.13.0

rufio:
  image: quay.io/tinkerbell/rufio:v0.4.1

tink:
  controller:
    image: quay.io/tinkerbell/tink-controller:v0.11.0
  server:
    image: quay.io/tinkerbell/tink:v0.11.0

# -- Global values
global:
  # publicIP is used to set what both smee.publicIP and stack.loadBalancerIP do individually.
  publicIP: 192.168.2.113
  trustedProxies: []
  rbac:
    type: Role
