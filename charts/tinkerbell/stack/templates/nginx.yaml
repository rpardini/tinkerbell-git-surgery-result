{{- if .Values.stack.enabled }}
{{- $sourceInterface := .Values.stack.relay.sourceInterface -}}
{{- $ifaceModes := dict "ipvlan" "" "macvlan" "" -}}
{{- $dhcpInterfaceType := .Values.stack.relay.interfaceMode -}}
{{- if not (hasKey $ifaceModes $dhcpInterfaceType) -}}
  {{- fail "invalid value at .stack.relay.interfaceMode: valid modes include ipvlan and macvlan" -}}
{{- end -}}
{{- $dhcpInterfaceName := printf "%s0" $dhcpInterfaceType -}}
{{- $listenBroadcast := true -}}
{{- if not (quote .Values.stack.relay.listenBroadcastTraffic | empty) -}}
  {{- $listenBroadcast = .Values.stack.relay.listenBroadcastTraffic -}}
{{- end -}}
{{- if not $listenBroadcast -}}
  {{- $dhcpInterfaceName = "eth0" -}}
{{- end -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.stack.name}}
  namespace: {{ .Release.Namespace | quote }}
spec:
  selector:
    matchLabels:
      {{- with .Values.stack.selector }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
  replicas: 1
  strategy:
    type: {{ .Values.stack.deployment.strategy.type }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/nginx-configmap.yaml") . | sha256sum }}
      labels:
        {{- with .Values.stack.selector }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- if not .Values.stack.service.enabled }}
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      {{- end }}
      hostPID: true
      containers:
      - name: {{ .Values.stack.name }}
        image: {{ .Values.stack.image }}
        command: ["/bin/bash", "-xeuc"]
        args:
        - |
          POD_NAMESERVER=$(awk '/nameserver/ {print $2}' /etc/resolv.conf) \
            envsubst '$POD_NAMESERVER' \
            </tmp/nginx.conf.template \
            >/etc/nginx/nginx.conf
          exec nginx -g 'daemon off;'
        ports:
        - containerPort: {{ .Values.hegel.deployment.port }}
          protocol: TCP
          name: {{ .Values.hegel.deployment.portName }}
        - containerPort: {{ .Values.tink.server.deployment.port }}
          protocol: TCP
          name: {{ .Values.tink.server.deployment.portName }}
        - containerPort: {{ .Values.stack.hook.port }}
          protocol: TCP
          name: hook-http
        {{- if or (not .Values.smee.hostNetwork) (not .Values.smee.deploy) }}
        - containerPort: {{ .Values.smee.http.port }}
          protocol: TCP
          name: {{ .Values.smee.http.name }}
        - containerPort: {{ .Values.smee.tftp.port }}
          protocol: UDP
          name: {{ .Values.smee.tftp.name }}
        - containerPort: {{ .Values.smee.syslog.port }}
          protocol: UDP
          name: {{ .Values.smee.syslog.name }}
        {{- end }}
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
        volumeMounts:
        - mountPath: /tmp
          readOnly: true
          name: nginx-conf
        {{- if .Values.stack.hook.enabled }}
        - mountPath: /usr/share/nginx/html
          name: hook-artifacts
        {{- end }}
      {{- if .Values.stack.relay.enabled }}
      - name: {{ .Values.stack.relay.name }}
        image: {{ .Values.stack.relay.image }}
        args: ["-m", "{{ .Values.stack.relay.presentGiaddrAction }}", "-c", "{{ .Values.stack.relay.maxHopCount }}", "-id", "{{ $dhcpInterfaceName }}", "-iu", "eth0", "-U", "eth0", "smee.{{ .Release.Namespace }}.svc.{{ .Values.stack.clusterDomain }}."]
        ports:
        - containerPort: 67
          protocol: UDP
          name: dhcp
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
        securityContext:
          capabilities:
            add:
              - NET_RAW
      {{- end }}
      volumes:
      - name: nginx-conf
        configMap:
          name: nginx-conf
          items:
            - key: nginx.conf
              path: nginx.conf.template
      {{- if and .Values.stack.relay.enabled $listenBroadcast }}
      - name: script
        configMap:
          name: host-interface-script
          defaultMode: 0500
      {{- end }}
      {{- if .Values.stack.hook.enabled }}
      - name: hook-artifacts
        {{- if .Values.stack.hook.persistence.enabled }}
        {{- if eq .Values.stack.hook.persistence.type "hostpath" }}
        hostPath:
          path: {{ .Values.stack.hook.downloadsDest }}
          type: DirectoryOrCreate
        {{- else if eq .Values.stack.hook.persistence.type "pvc" }}
        persistentVolumeClaim:
          claimName: {{ .Values.stack.hook.persistence.existingClaim | default "hook-artifacts" }}
        {{- else }}
        {{- fail "value for .Values.stack.hook.persistence.type is not as expected" }}
        {{- end }}
        {{- else }}
        emptyDir: {}
        {{- end }}
      {{- end }}
      {{- if and .Values.stack.relay.enabled $listenBroadcast }}
      initContainers:
      - name: relay-broadcast-interface
        image: {{ .Values.stack.relay.initImage }}
        command: ["/script/host_interface.sh", "-s", "{{ $sourceInterface }}", "-t", "{{ $dhcpInterfaceType }}"]
        volumeMounts:
            - name: script
              mountPath: "/script"
        securityContext:
          privileged: true
      {{- end }}
      {{- if .Values.stack.singleNodeClusterConfig.controlPlaneTolerationsEnabled }}
      tolerations:
      {{- include "singleNodeClusterConfig" . | indent 6 }}
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          {{- include "preferWorkerNodes" (dict "nodeAffinityWeight" .Values.stack.singleNodeClusterConfig.nodeAffinityWeight) | indent 10 }}
      {{- end }}
{{- if .Values.stack.service.enabled }}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: {{ .Values.stack.name }}
  name: {{ .Values.stack.name }}
  namespace: {{ .Release.Namespace | quote }}
spec:
  type: {{ .Values.stack.service.type }}
  {{- if eq .Values.stack.service.type "LoadBalancer" }}
  {{- if .Values.stack.lbClass }}
  loadBalancerClass: {{ .Values.stack.lbClass }}
  {{- end }}
  loadBalancerIP: {{ coalesce .Values.stack.loadBalancerIP .Values.global.publicIP }}
  externalTrafficPolicy: Local
  {{- end }}
  ports:
  - name: {{ .Values.hegel.name }}
    port: {{ .Values.hegel.deployment.port }}
    protocol: TCP
  - name: {{ .Values.tink.server.name }}
    port: {{ .Values.tink.server.deployment.port }}
    protocol: TCP
  - name: {{ .Values.stack.hook.name }}
    port: {{ .Values.stack.hook.port }}
    protocol: TCP
  - port: {{ .Values.smee.http.port }}
    protocol: TCP
    name: {{ .Values.smee.http.name }}
  - port: {{ .Values.smee.tftp.port }}
    protocol: UDP
    name: {{ .Values.smee.tftp.name }}
  - port: {{ .Values.smee.syslog.port }}
    protocol: UDP
    name: {{ .Values.smee.syslog.name }}
  - port: 67
    protocol: UDP
    name: dhcp
  selector:
    {{- with .Values.stack.selector }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
{{- end }}
{{- end }}
