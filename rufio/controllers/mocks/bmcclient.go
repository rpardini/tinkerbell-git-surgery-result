// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tinkerbell/rufio/controllers (interfaces: BMCClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	bmc "github.com/bmc-toolbox/bmclib/v2/bmc"
	gomock "github.com/golang/mock/gomock"
)

// MockBMCClient is a mock of BMCClient interface.
type MockBMCClient struct {
	ctrl     *gomock.Controller
	recorder *MockBMCClientMockRecorder
}

// MockBMCClientMockRecorder is the mock recorder for MockBMCClient.
type MockBMCClientMockRecorder struct {
	mock *MockBMCClient
}

// NewMockBMCClient creates a new mock instance.
func NewMockBMCClient(ctrl *gomock.Controller) *MockBMCClient {
	mock := &MockBMCClient{ctrl: ctrl}
	mock.recorder = &MockBMCClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBMCClient) EXPECT() *MockBMCClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockBMCClient) Close(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockBMCClientMockRecorder) Close(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBMCClient)(nil).Close), arg0)
}

// GetMetadata mocks base method.
func (m *MockBMCClient) GetMetadata() bmc.Metadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadata")
	ret0, _ := ret[0].(bmc.Metadata)
	return ret0
}

// GetMetadata indicates an expected call of GetMetadata.
func (mr *MockBMCClientMockRecorder) GetMetadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockBMCClient)(nil).GetMetadata))
}

// GetPowerState mocks base method.
func (m *MockBMCClient) GetPowerState(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPowerState", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPowerState indicates an expected call of GetPowerState.
func (mr *MockBMCClientMockRecorder) GetPowerState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPowerState", reflect.TypeOf((*MockBMCClient)(nil).GetPowerState), arg0)
}

// SetBootDevice mocks base method.
func (m *MockBMCClient) SetBootDevice(arg0 context.Context, arg1 string, arg2, arg3 bool) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBootDevice", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBootDevice indicates an expected call of SetBootDevice.
func (mr *MockBMCClientMockRecorder) SetBootDevice(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBootDevice", reflect.TypeOf((*MockBMCClient)(nil).SetBootDevice), arg0, arg1, arg2, arg3)
}

// SetPowerState mocks base method.
func (m *MockBMCClient) SetPowerState(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPowerState", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetPowerState indicates an expected call of SetPowerState.
func (mr *MockBMCClientMockRecorder) SetPowerState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPowerState", reflect.TypeOf((*MockBMCClient)(nil).SetPowerState), arg0, arg1)
}

// SetVirtualMedia mocks base method.
func (m *MockBMCClient) SetVirtualMedia(arg0 context.Context, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVirtualMedia", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetVirtualMedia indicates an expected call of SetVirtualMedia.
func (mr *MockBMCClientMockRecorder) SetVirtualMedia(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVirtualMedia", reflect.TypeOf((*MockBMCClient)(nil).SetVirtualMedia), arg0, arg1, arg2)
}
