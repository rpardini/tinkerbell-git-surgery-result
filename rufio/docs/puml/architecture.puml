@startuml architecture

!define SPRITES_URL https://raw.githubusercontent.com/plantuml-stdlib/gilbarbara-plantuml-sprites/v1.0/sprites
!define C4PUML_URL  https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master

!include C4PUML_URL/C4_Context.puml
!include C4PUML_URL/C4_Container.puml
!include SPRITES_URL/kubernetes.puml

' Tags (must be defined before use)
AddRelTag(provides, $lineStyle=DottedLine())

' System entities
System_Boundary(rufio, "Rufio") {
    Container(job_controller, "Job Controller", "Go, K8s Controller", \
        "Watches for Jobs and creates sequenced Tasks from Jobs")
    Container(task_controller, "Task Controller", "Go, K8s Controller", \
        "Executes Tasks on the target Machine")
    Container(machine_controller, "Machine Controller", "Go, K8s Controller", \
        "Monitors physical machine state and updates Machine resources to reflect state")
}

' External entities
Person_Ext(operator, "Operator")
System_Ext(auto_client, "Automated Client")
System_Ext(kubernetes, "Kubernetes Cluster", $sprite="kubernetes")
System_Boundary(physical_machine, "Physical Machine") {
    Container_Ext( bmc, "Baseboard Management Controller", "IPMI, Redfish", \
        "A management controller for the physical machine")
}

' Relationships
Rel_U(job_controller, kubernetes, "Watch for Jobs")
Rel_U(task_controller, kubernetes, "Watch for Tasks")
Rel(task_controller, bmc, "Executes tasks and ensure completion")
Rel(machine_controller, bmc, "Monitor physical machine state")
Rel_U(machine_controller, kubernetes, "Update Machine resource status")
Rel_R(job_controller, task_controller, "Creates Tasks via Kube API", "", $tags="provides")
Rel_L(auto_client, kubernetes, "Submits Rufio Jobs and retrieves state")
Rel_R(operator, kubernetes, "Submits Rufio Jobs and retrieves state")

@enduml