// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package workflow

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkflowServiceClient is the client API for WorkflowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkflowServiceClient interface {
	//
	// CreateWorkflow targets a specific hardware and it starts from a particular
	// template. The selected hardware is capable of picking the
	// workflow up for execution.
	CreateWorkflow(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	//
	// GetWorkflow returns a specific workflow by its identifier.
	GetWorkflow(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Workflow, error)
	//
	// DeleteWorkflow deletes a workflow. This is a logical deletion. Workflow
	// will stay available for inspection
	DeleteWorkflow(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Empty, error)
	//
	// ListWorkflows returns a list of workflows
	ListWorkflows(ctx context.Context, in *Empty, opts ...grpc.CallOption) (WorkflowService_ListWorkflowsClient, error)
	//
	// GetWorkflowContext returns specific information about where it is running,
	// its state and so on. Useful to debug a workflow and to understand its
	// current state.
	GetWorkflowContext(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*WorkflowContext, error)
	//
	// ShowWorkflowEvents returns a list of events for a specific workflows
	ShowWorkflowEvents(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (WorkflowService_ShowWorkflowEventsClient, error)
	GetWorkflowContextList(ctx context.Context, in *WorkflowContextRequest, opts ...grpc.CallOption) (*WorkflowContextList, error)
	GetWorkflowContexts(ctx context.Context, in *WorkflowContextRequest, opts ...grpc.CallOption) (WorkflowService_GetWorkflowContextsClient, error)
	GetWorkflowActions(ctx context.Context, in *WorkflowActionsRequest, opts ...grpc.CallOption) (*WorkflowActionList, error)
	ReportActionStatus(ctx context.Context, in *WorkflowActionStatus, opts ...grpc.CallOption) (*Empty, error)
	GetWorkflowData(ctx context.Context, in *GetWorkflowDataRequest, opts ...grpc.CallOption) (*GetWorkflowDataResponse, error)
	GetWorkflowMetadata(ctx context.Context, in *GetWorkflowDataRequest, opts ...grpc.CallOption) (*GetWorkflowDataResponse, error)
	GetWorkflowDataVersion(ctx context.Context, in *GetWorkflowDataRequest, opts ...grpc.CallOption) (*GetWorkflowDataResponse, error)
	UpdateWorkflowData(ctx context.Context, in *UpdateWorkflowDataRequest, opts ...grpc.CallOption) (*Empty, error)
}

type workflowServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkflowServiceClient(cc grpc.ClientConnInterface) WorkflowServiceClient {
	return &workflowServiceClient{cc}
}

func (c *workflowServiceClient) CreateWorkflow(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/github.com.tinkerbell.tink.protos.workflow.WorkflowService/CreateWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) GetWorkflow(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Workflow, error) {
	out := new(Workflow)
	err := c.cc.Invoke(ctx, "/github.com.tinkerbell.tink.protos.workflow.WorkflowService/GetWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) DeleteWorkflow(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/github.com.tinkerbell.tink.protos.workflow.WorkflowService/DeleteWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) ListWorkflows(ctx context.Context, in *Empty, opts ...grpc.CallOption) (WorkflowService_ListWorkflowsClient, error) {
	stream, err := c.cc.NewStream(ctx, &WorkflowService_ServiceDesc.Streams[0], "/github.com.tinkerbell.tink.protos.workflow.WorkflowService/ListWorkflows", opts...)
	if err != nil {
		return nil, err
	}
	x := &workflowServiceListWorkflowsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WorkflowService_ListWorkflowsClient interface {
	Recv() (*Workflow, error)
	grpc.ClientStream
}

type workflowServiceListWorkflowsClient struct {
	grpc.ClientStream
}

func (x *workflowServiceListWorkflowsClient) Recv() (*Workflow, error) {
	m := new(Workflow)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workflowServiceClient) GetWorkflowContext(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*WorkflowContext, error) {
	out := new(WorkflowContext)
	err := c.cc.Invoke(ctx, "/github.com.tinkerbell.tink.protos.workflow.WorkflowService/GetWorkflowContext", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) ShowWorkflowEvents(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (WorkflowService_ShowWorkflowEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &WorkflowService_ServiceDesc.Streams[1], "/github.com.tinkerbell.tink.protos.workflow.WorkflowService/ShowWorkflowEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &workflowServiceShowWorkflowEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WorkflowService_ShowWorkflowEventsClient interface {
	Recv() (*WorkflowActionStatus, error)
	grpc.ClientStream
}

type workflowServiceShowWorkflowEventsClient struct {
	grpc.ClientStream
}

func (x *workflowServiceShowWorkflowEventsClient) Recv() (*WorkflowActionStatus, error) {
	m := new(WorkflowActionStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workflowServiceClient) GetWorkflowContextList(ctx context.Context, in *WorkflowContextRequest, opts ...grpc.CallOption) (*WorkflowContextList, error) {
	out := new(WorkflowContextList)
	err := c.cc.Invoke(ctx, "/github.com.tinkerbell.tink.protos.workflow.WorkflowService/GetWorkflowContextList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) GetWorkflowContexts(ctx context.Context, in *WorkflowContextRequest, opts ...grpc.CallOption) (WorkflowService_GetWorkflowContextsClient, error) {
	stream, err := c.cc.NewStream(ctx, &WorkflowService_ServiceDesc.Streams[2], "/github.com.tinkerbell.tink.protos.workflow.WorkflowService/GetWorkflowContexts", opts...)
	if err != nil {
		return nil, err
	}
	x := &workflowServiceGetWorkflowContextsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WorkflowService_GetWorkflowContextsClient interface {
	Recv() (*WorkflowContext, error)
	grpc.ClientStream
}

type workflowServiceGetWorkflowContextsClient struct {
	grpc.ClientStream
}

func (x *workflowServiceGetWorkflowContextsClient) Recv() (*WorkflowContext, error) {
	m := new(WorkflowContext)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workflowServiceClient) GetWorkflowActions(ctx context.Context, in *WorkflowActionsRequest, opts ...grpc.CallOption) (*WorkflowActionList, error) {
	out := new(WorkflowActionList)
	err := c.cc.Invoke(ctx, "/github.com.tinkerbell.tink.protos.workflow.WorkflowService/GetWorkflowActions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) ReportActionStatus(ctx context.Context, in *WorkflowActionStatus, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/github.com.tinkerbell.tink.protos.workflow.WorkflowService/ReportActionStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) GetWorkflowData(ctx context.Context, in *GetWorkflowDataRequest, opts ...grpc.CallOption) (*GetWorkflowDataResponse, error) {
	out := new(GetWorkflowDataResponse)
	err := c.cc.Invoke(ctx, "/github.com.tinkerbell.tink.protos.workflow.WorkflowService/GetWorkflowData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) GetWorkflowMetadata(ctx context.Context, in *GetWorkflowDataRequest, opts ...grpc.CallOption) (*GetWorkflowDataResponse, error) {
	out := new(GetWorkflowDataResponse)
	err := c.cc.Invoke(ctx, "/github.com.tinkerbell.tink.protos.workflow.WorkflowService/GetWorkflowMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) GetWorkflowDataVersion(ctx context.Context, in *GetWorkflowDataRequest, opts ...grpc.CallOption) (*GetWorkflowDataResponse, error) {
	out := new(GetWorkflowDataResponse)
	err := c.cc.Invoke(ctx, "/github.com.tinkerbell.tink.protos.workflow.WorkflowService/GetWorkflowDataVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) UpdateWorkflowData(ctx context.Context, in *UpdateWorkflowDataRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/github.com.tinkerbell.tink.protos.workflow.WorkflowService/UpdateWorkflowData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkflowServiceServer is the server API for WorkflowService service.
// All implementations should embed UnimplementedWorkflowServiceServer
// for forward compatibility
type WorkflowServiceServer interface {
	//
	// CreateWorkflow targets a specific hardware and it starts from a particular
	// template. The selected hardware is capable of picking the
	// workflow up for execution.
	CreateWorkflow(context.Context, *CreateRequest) (*CreateResponse, error)
	//
	// GetWorkflow returns a specific workflow by its identifier.
	GetWorkflow(context.Context, *GetRequest) (*Workflow, error)
	//
	// DeleteWorkflow deletes a workflow. This is a logical deletion. Workflow
	// will stay available for inspection
	DeleteWorkflow(context.Context, *GetRequest) (*Empty, error)
	//
	// ListWorkflows returns a list of workflows
	ListWorkflows(*Empty, WorkflowService_ListWorkflowsServer) error
	//
	// GetWorkflowContext returns specific information about where it is running,
	// its state and so on. Useful to debug a workflow and to understand its
	// current state.
	GetWorkflowContext(context.Context, *GetRequest) (*WorkflowContext, error)
	//
	// ShowWorkflowEvents returns a list of events for a specific workflows
	ShowWorkflowEvents(*GetRequest, WorkflowService_ShowWorkflowEventsServer) error
	GetWorkflowContextList(context.Context, *WorkflowContextRequest) (*WorkflowContextList, error)
	GetWorkflowContexts(*WorkflowContextRequest, WorkflowService_GetWorkflowContextsServer) error
	GetWorkflowActions(context.Context, *WorkflowActionsRequest) (*WorkflowActionList, error)
	ReportActionStatus(context.Context, *WorkflowActionStatus) (*Empty, error)
	GetWorkflowData(context.Context, *GetWorkflowDataRequest) (*GetWorkflowDataResponse, error)
	GetWorkflowMetadata(context.Context, *GetWorkflowDataRequest) (*GetWorkflowDataResponse, error)
	GetWorkflowDataVersion(context.Context, *GetWorkflowDataRequest) (*GetWorkflowDataResponse, error)
	UpdateWorkflowData(context.Context, *UpdateWorkflowDataRequest) (*Empty, error)
}

// UnimplementedWorkflowServiceServer should be embedded to have forward compatible implementations.
type UnimplementedWorkflowServiceServer struct{}

func (UnimplementedWorkflowServiceServer) CreateWorkflow(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkflow not implemented")
}

func (UnimplementedWorkflowServiceServer) GetWorkflow(context.Context, *GetRequest) (*Workflow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflow not implemented")
}

func (UnimplementedWorkflowServiceServer) DeleteWorkflow(context.Context, *GetRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkflow not implemented")
}

func (UnimplementedWorkflowServiceServer) ListWorkflows(*Empty, WorkflowService_ListWorkflowsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListWorkflows not implemented")
}

func (UnimplementedWorkflowServiceServer) GetWorkflowContext(context.Context, *GetRequest) (*WorkflowContext, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowContext not implemented")
}

func (UnimplementedWorkflowServiceServer) ShowWorkflowEvents(*GetRequest, WorkflowService_ShowWorkflowEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method ShowWorkflowEvents not implemented")
}

func (UnimplementedWorkflowServiceServer) GetWorkflowContextList(context.Context, *WorkflowContextRequest) (*WorkflowContextList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowContextList not implemented")
}

func (UnimplementedWorkflowServiceServer) GetWorkflowContexts(*WorkflowContextRequest, WorkflowService_GetWorkflowContextsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetWorkflowContexts not implemented")
}

func (UnimplementedWorkflowServiceServer) GetWorkflowActions(context.Context, *WorkflowActionsRequest) (*WorkflowActionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowActions not implemented")
}

func (UnimplementedWorkflowServiceServer) ReportActionStatus(context.Context, *WorkflowActionStatus) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportActionStatus not implemented")
}

func (UnimplementedWorkflowServiceServer) GetWorkflowData(context.Context, *GetWorkflowDataRequest) (*GetWorkflowDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowData not implemented")
}

func (UnimplementedWorkflowServiceServer) GetWorkflowMetadata(context.Context, *GetWorkflowDataRequest) (*GetWorkflowDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowMetadata not implemented")
}

func (UnimplementedWorkflowServiceServer) GetWorkflowDataVersion(context.Context, *GetWorkflowDataRequest) (*GetWorkflowDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowDataVersion not implemented")
}

func (UnimplementedWorkflowServiceServer) UpdateWorkflowData(context.Context, *UpdateWorkflowDataRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkflowData not implemented")
}

// UnsafeWorkflowServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkflowServiceServer will
// result in compilation errors.
type UnsafeWorkflowServiceServer interface {
	mustEmbedUnimplementedWorkflowServiceServer()
}

func RegisterWorkflowServiceServer(s grpc.ServiceRegistrar, srv WorkflowServiceServer) {
	s.RegisterService(&WorkflowService_ServiceDesc, srv)
}

func _WorkflowService_CreateWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).CreateWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.tinkerbell.tink.protos.workflow.WorkflowService/CreateWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).CreateWorkflow(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_GetWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).GetWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.tinkerbell.tink.protos.workflow.WorkflowService/GetWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).GetWorkflow(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_DeleteWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).DeleteWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.tinkerbell.tink.protos.workflow.WorkflowService/DeleteWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).DeleteWorkflow(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_ListWorkflows_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkflowServiceServer).ListWorkflows(m, &workflowServiceListWorkflowsServer{stream})
}

type WorkflowService_ListWorkflowsServer interface {
	Send(*Workflow) error
	grpc.ServerStream
}

type workflowServiceListWorkflowsServer struct {
	grpc.ServerStream
}

func (x *workflowServiceListWorkflowsServer) Send(m *Workflow) error {
	return x.ServerStream.SendMsg(m)
}

func _WorkflowService_GetWorkflowContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).GetWorkflowContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.tinkerbell.tink.protos.workflow.WorkflowService/GetWorkflowContext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).GetWorkflowContext(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_ShowWorkflowEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkflowServiceServer).ShowWorkflowEvents(m, &workflowServiceShowWorkflowEventsServer{stream})
}

type WorkflowService_ShowWorkflowEventsServer interface {
	Send(*WorkflowActionStatus) error
	grpc.ServerStream
}

type workflowServiceShowWorkflowEventsServer struct {
	grpc.ServerStream
}

func (x *workflowServiceShowWorkflowEventsServer) Send(m *WorkflowActionStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _WorkflowService_GetWorkflowContextList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowContextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).GetWorkflowContextList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.tinkerbell.tink.protos.workflow.WorkflowService/GetWorkflowContextList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).GetWorkflowContextList(ctx, req.(*WorkflowContextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_GetWorkflowContexts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WorkflowContextRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkflowServiceServer).GetWorkflowContexts(m, &workflowServiceGetWorkflowContextsServer{stream})
}

type WorkflowService_GetWorkflowContextsServer interface {
	Send(*WorkflowContext) error
	grpc.ServerStream
}

type workflowServiceGetWorkflowContextsServer struct {
	grpc.ServerStream
}

func (x *workflowServiceGetWorkflowContextsServer) Send(m *WorkflowContext) error {
	return x.ServerStream.SendMsg(m)
}

func _WorkflowService_GetWorkflowActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowActionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).GetWorkflowActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.tinkerbell.tink.protos.workflow.WorkflowService/GetWorkflowActions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).GetWorkflowActions(ctx, req.(*WorkflowActionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_ReportActionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowActionStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).ReportActionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.tinkerbell.tink.protos.workflow.WorkflowService/ReportActionStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).ReportActionStatus(ctx, req.(*WorkflowActionStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_GetWorkflowData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkflowDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).GetWorkflowData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.tinkerbell.tink.protos.workflow.WorkflowService/GetWorkflowData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).GetWorkflowData(ctx, req.(*GetWorkflowDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_GetWorkflowMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkflowDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).GetWorkflowMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.tinkerbell.tink.protos.workflow.WorkflowService/GetWorkflowMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).GetWorkflowMetadata(ctx, req.(*GetWorkflowDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_GetWorkflowDataVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkflowDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).GetWorkflowDataVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.tinkerbell.tink.protos.workflow.WorkflowService/GetWorkflowDataVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).GetWorkflowDataVersion(ctx, req.(*GetWorkflowDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_UpdateWorkflowData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkflowDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).UpdateWorkflowData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.tinkerbell.tink.protos.workflow.WorkflowService/UpdateWorkflowData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).UpdateWorkflowData(ctx, req.(*UpdateWorkflowDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkflowService_ServiceDesc is the grpc.ServiceDesc for WorkflowService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkflowService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.tinkerbell.tink.protos.workflow.WorkflowService",
	HandlerType: (*WorkflowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWorkflow",
			Handler:    _WorkflowService_CreateWorkflow_Handler,
		},
		{
			MethodName: "GetWorkflow",
			Handler:    _WorkflowService_GetWorkflow_Handler,
		},
		{
			MethodName: "DeleteWorkflow",
			Handler:    _WorkflowService_DeleteWorkflow_Handler,
		},
		{
			MethodName: "GetWorkflowContext",
			Handler:    _WorkflowService_GetWorkflowContext_Handler,
		},
		{
			MethodName: "GetWorkflowContextList",
			Handler:    _WorkflowService_GetWorkflowContextList_Handler,
		},
		{
			MethodName: "GetWorkflowActions",
			Handler:    _WorkflowService_GetWorkflowActions_Handler,
		},
		{
			MethodName: "ReportActionStatus",
			Handler:    _WorkflowService_ReportActionStatus_Handler,
		},
		{
			MethodName: "GetWorkflowData",
			Handler:    _WorkflowService_GetWorkflowData_Handler,
		},
		{
			MethodName: "GetWorkflowMetadata",
			Handler:    _WorkflowService_GetWorkflowMetadata_Handler,
		},
		{
			MethodName: "GetWorkflowDataVersion",
			Handler:    _WorkflowService_GetWorkflowDataVersion_Handler,
		},
		{
			MethodName: "UpdateWorkflowData",
			Handler:    _WorkflowService_UpdateWorkflowData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListWorkflows",
			Handler:       _WorkflowService_ListWorkflows_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ShowWorkflowEvents",
			Handler:       _WorkflowService_ShowWorkflowEvents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetWorkflowContexts",
			Handler:       _WorkflowService_GetWorkflowContexts_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/workflow/workflow.proto",
}
