// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package hardware

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HardwareServiceClient is the client API for HardwareService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HardwareServiceClient interface {
	// Push adds a new Hardware profile to the data store.
	Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*Empty, error)
	// ByMac returns the Hardware with the given hardware MAC Address.
	ByMAC(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Hardware, error)
	// ByIP returns the Hardware with the given IP Address.
	ByIP(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Hardware, error)
	// ByID returns the Hardware with the given ID.
	ByID(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Hardware, error)
	// All returns all of the Hardware profiles.
	All(ctx context.Context, in *Empty, opts ...grpc.CallOption) (HardwareService_AllClient, error)
	// DeprecatedWatch watches for events on the given hardware and streams the matching Hardware.
	// We would like to keep Watch as the function used to stream events,
	// and ideally Watch should be more powerful than the DeprecatedWatch
	DeprecatedWatch(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (HardwareService_DeprecatedWatchClient, error)
	// Delete deletes the given hardware from the data store.
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*Empty, error)
}

type hardwareServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHardwareServiceClient(cc grpc.ClientConnInterface) HardwareServiceClient {
	return &hardwareServiceClient{cc}
}

func (c *hardwareServiceClient) Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/github.com.tinkerbell.tink.protos.hardware.HardwareService/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hardwareServiceClient) ByMAC(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Hardware, error) {
	out := new(Hardware)
	err := c.cc.Invoke(ctx, "/github.com.tinkerbell.tink.protos.hardware.HardwareService/ByMAC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hardwareServiceClient) ByIP(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Hardware, error) {
	out := new(Hardware)
	err := c.cc.Invoke(ctx, "/github.com.tinkerbell.tink.protos.hardware.HardwareService/ByIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hardwareServiceClient) ByID(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Hardware, error) {
	out := new(Hardware)
	err := c.cc.Invoke(ctx, "/github.com.tinkerbell.tink.protos.hardware.HardwareService/ByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hardwareServiceClient) All(ctx context.Context, in *Empty, opts ...grpc.CallOption) (HardwareService_AllClient, error) {
	stream, err := c.cc.NewStream(ctx, &HardwareService_ServiceDesc.Streams[0], "/github.com.tinkerbell.tink.protos.hardware.HardwareService/All", opts...)
	if err != nil {
		return nil, err
	}
	x := &hardwareServiceAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HardwareService_AllClient interface {
	Recv() (*Hardware, error)
	grpc.ClientStream
}

type hardwareServiceAllClient struct {
	grpc.ClientStream
}

func (x *hardwareServiceAllClient) Recv() (*Hardware, error) {
	m := new(Hardware)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hardwareServiceClient) DeprecatedWatch(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (HardwareService_DeprecatedWatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &HardwareService_ServiceDesc.Streams[1], "/github.com.tinkerbell.tink.protos.hardware.HardwareService/DeprecatedWatch", opts...)
	if err != nil {
		return nil, err
	}
	x := &hardwareServiceDeprecatedWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HardwareService_DeprecatedWatchClient interface {
	Recv() (*Hardware, error)
	grpc.ClientStream
}

type hardwareServiceDeprecatedWatchClient struct {
	grpc.ClientStream
}

func (x *hardwareServiceDeprecatedWatchClient) Recv() (*Hardware, error) {
	m := new(Hardware)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hardwareServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/github.com.tinkerbell.tink.protos.hardware.HardwareService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HardwareServiceServer is the server API for HardwareService service.
// All implementations should embed UnimplementedHardwareServiceServer
// for forward compatibility
type HardwareServiceServer interface {
	// Push adds a new Hardware profile to the data store.
	Push(context.Context, *PushRequest) (*Empty, error)
	// ByMac returns the Hardware with the given hardware MAC Address.
	ByMAC(context.Context, *GetRequest) (*Hardware, error)
	// ByIP returns the Hardware with the given IP Address.
	ByIP(context.Context, *GetRequest) (*Hardware, error)
	// ByID returns the Hardware with the given ID.
	ByID(context.Context, *GetRequest) (*Hardware, error)
	// All returns all of the Hardware profiles.
	All(*Empty, HardwareService_AllServer) error
	// DeprecatedWatch watches for events on the given hardware and streams the matching Hardware.
	// We would like to keep Watch as the function used to stream events,
	// and ideally Watch should be more powerful than the DeprecatedWatch
	DeprecatedWatch(*GetRequest, HardwareService_DeprecatedWatchServer) error
	// Delete deletes the given hardware from the data store.
	Delete(context.Context, *DeleteRequest) (*Empty, error)
}

// UnimplementedHardwareServiceServer should be embedded to have forward compatible implementations.
type UnimplementedHardwareServiceServer struct{}

func (UnimplementedHardwareServiceServer) Push(context.Context, *PushRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}

func (UnimplementedHardwareServiceServer) ByMAC(context.Context, *GetRequest) (*Hardware, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ByMAC not implemented")
}

func (UnimplementedHardwareServiceServer) ByIP(context.Context, *GetRequest) (*Hardware, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ByIP not implemented")
}

func (UnimplementedHardwareServiceServer) ByID(context.Context, *GetRequest) (*Hardware, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ByID not implemented")
}

func (UnimplementedHardwareServiceServer) All(*Empty, HardwareService_AllServer) error {
	return status.Errorf(codes.Unimplemented, "method All not implemented")
}

func (UnimplementedHardwareServiceServer) DeprecatedWatch(*GetRequest, HardwareService_DeprecatedWatchServer) error {
	return status.Errorf(codes.Unimplemented, "method DeprecatedWatch not implemented")
}

func (UnimplementedHardwareServiceServer) Delete(context.Context, *DeleteRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

// UnsafeHardwareServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HardwareServiceServer will
// result in compilation errors.
type UnsafeHardwareServiceServer interface {
	mustEmbedUnimplementedHardwareServiceServer()
}

func RegisterHardwareServiceServer(s grpc.ServiceRegistrar, srv HardwareServiceServer) {
	s.RegisterService(&HardwareService_ServiceDesc, srv)
}

func _HardwareService_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HardwareServiceServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.tinkerbell.tink.protos.hardware.HardwareService/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HardwareServiceServer).Push(ctx, req.(*PushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HardwareService_ByMAC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HardwareServiceServer).ByMAC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.tinkerbell.tink.protos.hardware.HardwareService/ByMAC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HardwareServiceServer).ByMAC(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HardwareService_ByIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HardwareServiceServer).ByIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.tinkerbell.tink.protos.hardware.HardwareService/ByIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HardwareServiceServer).ByIP(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HardwareService_ByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HardwareServiceServer).ByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.tinkerbell.tink.protos.hardware.HardwareService/ByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HardwareServiceServer).ByID(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HardwareService_All_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HardwareServiceServer).All(m, &hardwareServiceAllServer{stream})
}

type HardwareService_AllServer interface {
	Send(*Hardware) error
	grpc.ServerStream
}

type hardwareServiceAllServer struct {
	grpc.ServerStream
}

func (x *hardwareServiceAllServer) Send(m *Hardware) error {
	return x.ServerStream.SendMsg(m)
}

func _HardwareService_DeprecatedWatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HardwareServiceServer).DeprecatedWatch(m, &hardwareServiceDeprecatedWatchServer{stream})
}

type HardwareService_DeprecatedWatchServer interface {
	Send(*Hardware) error
	grpc.ServerStream
}

type hardwareServiceDeprecatedWatchServer struct {
	grpc.ServerStream
}

func (x *hardwareServiceDeprecatedWatchServer) Send(m *Hardware) error {
	return x.ServerStream.SendMsg(m)
}

func _HardwareService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HardwareServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.tinkerbell.tink.protos.hardware.HardwareService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HardwareServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HardwareService_ServiceDesc is the grpc.ServiceDesc for HardwareService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HardwareService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.tinkerbell.tink.protos.hardware.HardwareService",
	HandlerType: (*HardwareServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Push",
			Handler:    _HardwareService_Push_Handler,
		},
		{
			MethodName: "ByMAC",
			Handler:    _HardwareService_ByMAC_Handler,
		},
		{
			MethodName: "ByIP",
			Handler:    _HardwareService_ByIP_Handler,
		},
		{
			MethodName: "ByID",
			Handler:    _HardwareService_ByID_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _HardwareService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "All",
			Handler:       _HardwareService_All_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeprecatedWatch",
			Handler:       _HardwareService_DeprecatedWatch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/hardware/hardware.proto",
}
