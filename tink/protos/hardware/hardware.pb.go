// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/hardware/hardware.proto

package hardware

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PushRequest struct {
	Data                 string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PushRequest) Reset()         { *m = PushRequest{} }
func (m *PushRequest) String() string { return proto.CompactTextString(m) }
func (*PushRequest) ProtoMessage()    {}
func (*PushRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad4df2c422b77a34, []int{0}
}

func (m *PushRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PushRequest.Unmarshal(m, b)
}
func (m *PushRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PushRequest.Marshal(b, m, deterministic)
}
func (m *PushRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushRequest.Merge(m, src)
}
func (m *PushRequest) XXX_Size() int {
	return xxx_messageInfo_PushRequest.Size(m)
}
func (m *PushRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PushRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PushRequest proto.InternalMessageInfo

func (m *PushRequest) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad4df2c422b77a34, []int{1}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type GetRequest struct {
	MAC                  string   `protobuf:"bytes,1,opt,name=MAC,proto3" json:"MAC,omitempty"`
	IP                   string   `protobuf:"bytes,2,opt,name=IP,proto3" json:"IP,omitempty"`
	ID                   string   `protobuf:"bytes,3,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRequest) Reset()         { *m = GetRequest{} }
func (m *GetRequest) String() string { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()    {}
func (*GetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad4df2c422b77a34, []int{2}
}

func (m *GetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRequest.Unmarshal(m, b)
}
func (m *GetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRequest.Marshal(b, m, deterministic)
}
func (m *GetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRequest.Merge(m, src)
}
func (m *GetRequest) XXX_Size() int {
	return xxx_messageInfo_GetRequest.Size(m)
}
func (m *GetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRequest proto.InternalMessageInfo

func (m *GetRequest) GetMAC() string {
	if m != nil {
		return m.MAC
	}
	return ""
}

func (m *GetRequest) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *GetRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type Hardware struct {
	JSON                 string   `protobuf:"bytes,1,opt,name=JSON,proto3" json:"JSON,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Hardware) Reset()         { *m = Hardware{} }
func (m *Hardware) String() string { return proto.CompactTextString(m) }
func (*Hardware) ProtoMessage()    {}
func (*Hardware) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad4df2c422b77a34, []int{3}
}

func (m *Hardware) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Hardware.Unmarshal(m, b)
}
func (m *Hardware) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Hardware.Marshal(b, m, deterministic)
}
func (m *Hardware) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hardware.Merge(m, src)
}
func (m *Hardware) XXX_Size() int {
	return xxx_messageInfo_Hardware.Size(m)
}
func (m *Hardware) XXX_DiscardUnknown() {
	xxx_messageInfo_Hardware.DiscardUnknown(m)
}

var xxx_messageInfo_Hardware proto.InternalMessageInfo

func (m *Hardware) GetJSON() string {
	if m != nil {
		return m.JSON
	}
	return ""
}

func init() {
	proto.RegisterType((*PushRequest)(nil), "github.com.packethost.tinkerbell.protos.hardware.PushRequest")
	proto.RegisterType((*Empty)(nil), "github.com.packethost.tinkerbell.protos.hardware.Empty")
	proto.RegisterType((*GetRequest)(nil), "github.com.packethost.tinkerbell.protos.hardware.GetRequest")
	proto.RegisterType((*Hardware)(nil), "github.com.packethost.tinkerbell.protos.hardware.Hardware")
}

func init() { proto.RegisterFile("protos/hardware/hardware.proto", fileDescriptor_ad4df2c422b77a34) }

var fileDescriptor_ad4df2c422b77a34 = []byte{
	// 309 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x54, 0x4d, 0x4b, 0xc3, 0x40,
	0x10, 0x25, 0x9f, 0xea, 0x08, 0x2a, 0x7b, 0x0a, 0x3d, 0x14, 0xcd, 0x49, 0x10, 0x37, 0xa5, 0x22,
	0x7a, 0x12, 0x1a, 0x23, 0x1a, 0x41, 0x0d, 0xed, 0x41, 0xf0, 0xb6, 0x4d, 0x97, 0xa6, 0xd8, 0x9a,
	0xb8, 0xbb, 0x49, 0xc9, 0xcf, 0xf4, 0x1f, 0xc9, 0xae, 0x49, 0x5b, 0xbc, 0x25, 0x87, 0xf6, 0xf6,
	0x66, 0xf2, 0x1e, 0x2f, 0x6f, 0x76, 0x18, 0xe8, 0x66, 0x2c, 0x15, 0x29, 0xf7, 0x12, 0xc2, 0x26,
	0x4b, 0xc2, 0xe8, 0x0a, 0x60, 0xf5, 0x01, 0x5d, 0x4c, 0x67, 0x22, 0xc9, 0xc7, 0x38, 0x4e, 0x17,
	0x38, 0x23, 0xf1, 0x27, 0x15, 0x49, 0xca, 0x05, 0x66, 0x69, 0x41, 0xd9, 0x1f, 0x85, 0xe3, 0x5a,
	0xe2, 0x9e, 0xc1, 0x61, 0x94, 0xf3, 0x64, 0x48, 0xbf, 0x73, 0xca, 0x05, 0x42, 0x60, 0x4e, 0x88,
	0x20, 0x8e, 0x76, 0xaa, 0x9d, 0x1f, 0x0c, 0x15, 0x76, 0xf7, 0xc0, 0x7a, 0x58, 0x64, 0xa2, 0x74,
	0xef, 0x00, 0x1e, 0xa9, 0xa8, 0xa9, 0x27, 0x60, 0xbc, 0x0c, 0xee, 0x2b, 0xa6, 0x84, 0xe8, 0x08,
	0xf4, 0x30, 0x72, 0x74, 0xd5, 0xd0, 0xc3, 0x48, 0xd5, 0x81, 0x63, 0x54, 0x75, 0xe0, 0x76, 0x61,
	0xff, 0xa9, 0xf2, 0x95, 0x46, 0xcf, 0xa3, 0xb7, 0xd7, 0xda, 0x48, 0xe2, 0xfe, 0x8f, 0x0d, 0xc7,
	0x35, 0x61, 0x44, 0x59, 0x31, 0x8b, 0x29, 0x12, 0x60, 0xca, 0xff, 0x43, 0xb7, 0xb8, 0x41, 0x2a,
	0xbc, 0x11, 0xa9, 0xd3, 0x6f, 0xa4, 0x54, 0x49, 0xd1, 0x12, 0x2c, 0xbf, 0x94, 0x91, 0x6e, 0x1a,
	0x89, 0xd7, 0xd3, 0xe9, 0x5c, 0x37, 0x12, 0xae, 0xc6, 0x52, 0x80, 0xe9, 0x97, 0x61, 0xb4, 0x23,
	0xdf, 0x60, 0xeb, 0xbe, 0x0c, 0x8c, 0xc1, 0x7c, 0x8e, 0x5a, 0xbc, 0x51, 0x4b, 0xc7, 0x9e, 0x86,
	0x32, 0xb0, 0xc3, 0xaf, 0xa9, 0x5c, 0xe1, 0x36, 0xb6, 0x6d, 0xd6, 0xa9, 0x04, 0xeb, 0x9d, 0x88,
	0x38, 0xd9, 0xf6, 0x78, 0x7b, 0x9a, 0x7f, 0xf9, 0xb1, 0x71, 0x0e, 0xbc, 0xb5, 0xd2, 0x53, 0x4a,
	0xef, 0xdf, 0x29, 0x19, 0xdb, 0xaa, 0x71, 0xf5, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xdf, 0x1a, 0x71,
	0x76, 0x64, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HardwareServiceClient is the client API for HardwareService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HardwareServiceClient interface {
	Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*Empty, error)
	ByMAC(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Hardware, error)
	ByIP(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Hardware, error)
	ByID(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Hardware, error)
	All(ctx context.Context, in *Empty, opts ...grpc.CallOption) (HardwareService_AllClient, error)
	Ingest(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Watch(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (HardwareService_WatchClient, error)
}

type hardwareServiceClient struct {
	cc *grpc.ClientConn
}

func NewHardwareServiceClient(cc *grpc.ClientConn) HardwareServiceClient {
	return &hardwareServiceClient{cc}
}

func (c *hardwareServiceClient) Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/github.com.packethost.tinkerbell.protos.hardware.HardwareService/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hardwareServiceClient) ByMAC(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Hardware, error) {
	out := new(Hardware)
	err := c.cc.Invoke(ctx, "/github.com.packethost.tinkerbell.protos.hardware.HardwareService/ByMAC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hardwareServiceClient) ByIP(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Hardware, error) {
	out := new(Hardware)
	err := c.cc.Invoke(ctx, "/github.com.packethost.tinkerbell.protos.hardware.HardwareService/ByIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hardwareServiceClient) ByID(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Hardware, error) {
	out := new(Hardware)
	err := c.cc.Invoke(ctx, "/github.com.packethost.tinkerbell.protos.hardware.HardwareService/ByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hardwareServiceClient) All(ctx context.Context, in *Empty, opts ...grpc.CallOption) (HardwareService_AllClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HardwareService_serviceDesc.Streams[0], "/github.com.packethost.tinkerbell.protos.hardware.HardwareService/All", opts...)
	if err != nil {
		return nil, err
	}
	x := &hardwareServiceAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HardwareService_AllClient interface {
	Recv() (*Hardware, error)
	grpc.ClientStream
}

type hardwareServiceAllClient struct {
	grpc.ClientStream
}

func (x *hardwareServiceAllClient) Recv() (*Hardware, error) {
	m := new(Hardware)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hardwareServiceClient) Ingest(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/github.com.packethost.tinkerbell.protos.hardware.HardwareService/Ingest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hardwareServiceClient) Watch(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (HardwareService_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HardwareService_serviceDesc.Streams[1], "/github.com.packethost.tinkerbell.protos.hardware.HardwareService/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &hardwareServiceWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HardwareService_WatchClient interface {
	Recv() (*Hardware, error)
	grpc.ClientStream
}

type hardwareServiceWatchClient struct {
	grpc.ClientStream
}

func (x *hardwareServiceWatchClient) Recv() (*Hardware, error) {
	m := new(Hardware)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HardwareServiceServer is the server API for HardwareService service.
type HardwareServiceServer interface {
	Push(context.Context, *PushRequest) (*Empty, error)
	ByMAC(context.Context, *GetRequest) (*Hardware, error)
	ByIP(context.Context, *GetRequest) (*Hardware, error)
	ByID(context.Context, *GetRequest) (*Hardware, error)
	All(*Empty, HardwareService_AllServer) error
	Ingest(context.Context, *Empty) (*Empty, error)
	Watch(*GetRequest, HardwareService_WatchServer) error
}

// UnimplementedHardwareServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHardwareServiceServer struct {
}

func (*UnimplementedHardwareServiceServer) Push(ctx context.Context, req *PushRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (*UnimplementedHardwareServiceServer) ByMAC(ctx context.Context, req *GetRequest) (*Hardware, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ByMAC not implemented")
}
func (*UnimplementedHardwareServiceServer) ByIP(ctx context.Context, req *GetRequest) (*Hardware, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ByIP not implemented")
}
func (*UnimplementedHardwareServiceServer) ByID(ctx context.Context, req *GetRequest) (*Hardware, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ByID not implemented")
}
func (*UnimplementedHardwareServiceServer) All(req *Empty, srv HardwareService_AllServer) error {
	return status.Errorf(codes.Unimplemented, "method All not implemented")
}
func (*UnimplementedHardwareServiceServer) Ingest(ctx context.Context, req *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ingest not implemented")
}
func (*UnimplementedHardwareServiceServer) Watch(req *GetRequest, srv HardwareService_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}

func RegisterHardwareServiceServer(s *grpc.Server, srv HardwareServiceServer) {
	s.RegisterService(&_HardwareService_serviceDesc, srv)
}

func _HardwareService_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HardwareServiceServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.packethost.tinkerbell.protos.hardware.HardwareService/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HardwareServiceServer).Push(ctx, req.(*PushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HardwareService_ByMAC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HardwareServiceServer).ByMAC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.packethost.tinkerbell.protos.hardware.HardwareService/ByMAC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HardwareServiceServer).ByMAC(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HardwareService_ByIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HardwareServiceServer).ByIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.packethost.tinkerbell.protos.hardware.HardwareService/ByIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HardwareServiceServer).ByIP(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HardwareService_ByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HardwareServiceServer).ByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.packethost.tinkerbell.protos.hardware.HardwareService/ByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HardwareServiceServer).ByID(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HardwareService_All_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HardwareServiceServer).All(m, &hardwareServiceAllServer{stream})
}

type HardwareService_AllServer interface {
	Send(*Hardware) error
	grpc.ServerStream
}

type hardwareServiceAllServer struct {
	grpc.ServerStream
}

func (x *hardwareServiceAllServer) Send(m *Hardware) error {
	return x.ServerStream.SendMsg(m)
}

func _HardwareService_Ingest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HardwareServiceServer).Ingest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.packethost.tinkerbell.protos.hardware.HardwareService/Ingest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HardwareServiceServer).Ingest(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HardwareService_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HardwareServiceServer).Watch(m, &hardwareServiceWatchServer{stream})
}

type HardwareService_WatchServer interface {
	Send(*Hardware) error
	grpc.ServerStream
}

type hardwareServiceWatchServer struct {
	grpc.ServerStream
}

func (x *hardwareServiceWatchServer) Send(m *Hardware) error {
	return x.ServerStream.SendMsg(m)
}

var _HardwareService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.packethost.tinkerbell.protos.hardware.HardwareService",
	HandlerType: (*HardwareServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Push",
			Handler:    _HardwareService_Push_Handler,
		},
		{
			MethodName: "ByMAC",
			Handler:    _HardwareService_ByMAC_Handler,
		},
		{
			MethodName: "ByIP",
			Handler:    _HardwareService_ByIP_Handler,
		},
		{
			MethodName: "ByID",
			Handler:    _HardwareService_ByID_Handler,
		},
		{
			MethodName: "Ingest",
			Handler:    _HardwareService_Ingest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "All",
			Handler:       _HardwareService_All_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Watch",
			Handler:       _HardwareService_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/hardware/hardware.proto",
}
