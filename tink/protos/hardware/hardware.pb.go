//
// Hardware represents a single device managed by Tinkerbell.
// It can be identifed with its own UUID but more in general it can be everything that has a MAC address.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.0
// source: protos/hardware/hardware.proto

package hardware

import (
	reflect "reflect"
	sync "sync"

	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//
// PushRequest is the body for the Push method. It contains information about
// a piece of hardware.
type PushRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// Hardware describes the hardware you want to register to Tinkerbell and
	// what it looks like.
	// Hostname, MAC address, DHCP, network interfaces, metadata and so on.
	Data *Hardware `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PushRequest) Reset() {
	*x = PushRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_hardware_hardware_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushRequest) ProtoMessage() {}

func (x *PushRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_hardware_hardware_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushRequest.ProtoReflect.Descriptor instead.
func (*PushRequest) Descriptor() ([]byte, []int) {
	return file_protos_hardware_hardware_proto_rawDescGZIP(), []int{0}
}

func (x *PushRequest) GetData() *Hardware {
	if x != nil {
		return x.Data
	}
	return nil
}

//
// Empty represents an empty response
type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_hardware_hardware_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_protos_hardware_hardware_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_protos_hardware_hardware_proto_rawDescGZIP(), []int{1}
}

//
// GetRequest is the request used by the Get various get methods exposed by the
// hardware service.
type GetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mac string `protobuf:"bytes,1,opt,name=mac,proto3" json:"mac,omitempty"`
	Ip  string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Id  string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_hardware_hardware_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_hardware_hardware_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_protos_hardware_hardware_proto_rawDescGZIP(), []int{2}
}

func (x *GetRequest) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *GetRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *GetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

//
// Hardware describes a specific device managed by Tinkerbell
type Hardware struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// Describe network layout for your hardware
	Network *Hardware_Network `protobuf:"bytes,6,opt,name=network,proto3" json:"network,omitempty"`
	//
	// A UUID representing a unique identifier for your hardware
	Id      string `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`
	Version int64  `protobuf:"varint,8,opt,name=version,proto3" json:"version,omitempty"`
	//
	// Metadata served by Hegel and that are accessible from the server itself To
	// know more about what Hegel is have a look at the documentation
	// https://docs.tinkerbell.org/services/hegel/
	//
	// And at this URL you can find an explanation of how a metadata looks like:
	// https://docs.tinkerbell.org/about/hardware-data/
	// Right now it is a string but we want to structure it a bit more.
	Metadata string `protobuf:"bytes,9,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Hardware) Reset() {
	*x = Hardware{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_hardware_hardware_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hardware) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hardware) ProtoMessage() {}

func (x *Hardware) ProtoReflect() protoreflect.Message {
	mi := &file_protos_hardware_hardware_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hardware.ProtoReflect.Descriptor instead.
func (*Hardware) Descriptor() ([]byte, []int) {
	return file_protos_hardware_hardware_proto_rawDescGZIP(), []int{3}
}

func (x *Hardware) GetNetwork() *Hardware_Network {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *Hardware) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Hardware) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Hardware) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

//
// DeleteRequest gets used when you want to delete an hardware by its identifier.
// Usually it is a UUID.
type DeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_hardware_hardware_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_hardware_hardware_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_protos_hardware_hardware_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

//
// DHCP represents
type Hardware_DHCP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// The MAC address for your hardware.  It is important to get it
	// right because it is used from Tinkerbell to dispatch workflows to the
	// right destination.
	Mac string `protobuf:"bytes,1,opt,name=mac,proto3" json:"mac,omitempty"`
	//
	// Hostname represents the hostname of your server
	Hostname  string `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	LeaseTime int64  `protobuf:"varint,4,opt,name=lease_time,json=leaseTime,proto3" json:"lease_time,omitempty"`
	//
	NameServers []string `protobuf:"bytes,5,rep,name=name_servers,json=nameServers,proto3" json:"name_servers,omitempty"`
	//
	TimeServers []string `protobuf:"bytes,6,rep,name=time_servers,json=timeServers,proto3" json:"time_servers,omitempty"`
	//
	// The CPU architecture like arm64, amd64, x86_64 and so on.
	Arch string `protobuf:"bytes,8,opt,name=arch,proto3" json:"arch,omitempty"`
	Uefi bool   `protobuf:"varint,9,opt,name=uefi,proto3" json:"uefi,omitempty"`
	//
	// The name of the interface in your hardware like eth0, en1 and so on.
	IfaceName string `protobuf:"bytes,10,opt,name=iface_name,json=ifaceName,proto3" json:"iface_name,omitempty"`
	//
	//
	Ip *Hardware_DHCP_IP `protobuf:"bytes,11,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *Hardware_DHCP) Reset() {
	*x = Hardware_DHCP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_hardware_hardware_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hardware_DHCP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hardware_DHCP) ProtoMessage() {}

func (x *Hardware_DHCP) ProtoReflect() protoreflect.Message {
	mi := &file_protos_hardware_hardware_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hardware_DHCP.ProtoReflect.Descriptor instead.
func (*Hardware_DHCP) Descriptor() ([]byte, []int) {
	return file_protos_hardware_hardware_proto_rawDescGZIP(), []int{3, 0}
}

func (x *Hardware_DHCP) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *Hardware_DHCP) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Hardware_DHCP) GetLeaseTime() int64 {
	if x != nil {
		return x.LeaseTime
	}
	return 0
}

func (x *Hardware_DHCP) GetNameServers() []string {
	if x != nil {
		return x.NameServers
	}
	return nil
}

func (x *Hardware_DHCP) GetTimeServers() []string {
	if x != nil {
		return x.TimeServers
	}
	return nil
}

func (x *Hardware_DHCP) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

func (x *Hardware_DHCP) GetUefi() bool {
	if x != nil {
		return x.Uefi
	}
	return false
}

func (x *Hardware_DHCP) GetIfaceName() string {
	if x != nil {
		return x.IfaceName
	}
	return ""
}

func (x *Hardware_DHCP) GetIp() *Hardware_DHCP_IP {
	if x != nil {
		return x.Ip
	}
	return nil
}

//
// Netboot is the model used to represent and configure the netbooting
// behavior From there you can customise the IPXE chained during boot, the in
// memory operating system tand so on.
type Hardware_Netboot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// This is a boolean value that tells to Tinkerbell if the hardware has PXE
	// enabled. If set to false Tinkerbell won't attempt a provisioning at the
	// moment.
	AllowPxe bool `protobuf:"varint,1,opt,name=allow_pxe,json=allowPxe,proto3" json:"allow_pxe,omitempty"`
	//
	// When set to true Osie will lookup and execute the workflows assigned to
	// a particular hardware.
	//
	// When set to false Osie will be executed but no workflows will be
	// applied. This is useful if you don't want to execute any workflows but
	// you simply need an operating system running in memory
	AllowWorkflow bool `protobuf:"varint,2,opt,name=allow_workflow,json=allowWorkflow,proto3" json:"allow_workflow,omitempty"`
	//
	//
	Ipxe *Hardware_Netboot_IPXE `protobuf:"bytes,3,opt,name=ipxe,proto3" json:"ipxe,omitempty"`
	//
	//
	Osie *Hardware_Netboot_Osie `protobuf:"bytes,5,opt,name=osie,proto3" json:"osie,omitempty"`
}

func (x *Hardware_Netboot) Reset() {
	*x = Hardware_Netboot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_hardware_hardware_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hardware_Netboot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hardware_Netboot) ProtoMessage() {}

func (x *Hardware_Netboot) ProtoReflect() protoreflect.Message {
	mi := &file_protos_hardware_hardware_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hardware_Netboot.ProtoReflect.Descriptor instead.
func (*Hardware_Netboot) Descriptor() ([]byte, []int) {
	return file_protos_hardware_hardware_proto_rawDescGZIP(), []int{3, 1}
}

func (x *Hardware_Netboot) GetAllowPxe() bool {
	if x != nil {
		return x.AllowPxe
	}
	return false
}

func (x *Hardware_Netboot) GetAllowWorkflow() bool {
	if x != nil {
		return x.AllowWorkflow
	}
	return false
}

func (x *Hardware_Netboot) GetIpxe() *Hardware_Netboot_IPXE {
	if x != nil {
		return x.Ipxe
	}
	return nil
}

func (x *Hardware_Netboot) GetOsie() *Hardware_Netboot_Osie {
	if x != nil {
		return x.Osie
	}
	return nil
}

//
// Network describes the networking you expect in your hardware.
// The number of interfaces, their name, gateway and IP.
type Hardware_Network struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// Configure the network interfaces you have in your hardware and defines their
	// behavior.
	Interfaces []*Hardware_Network_Interface `protobuf:"bytes,3,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
}

func (x *Hardware_Network) Reset() {
	*x = Hardware_Network{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_hardware_hardware_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hardware_Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hardware_Network) ProtoMessage() {}

func (x *Hardware_Network) ProtoReflect() protoreflect.Message {
	mi := &file_protos_hardware_hardware_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hardware_Network.ProtoReflect.Descriptor instead.
func (*Hardware_Network) Descriptor() ([]byte, []int) {
	return file_protos_hardware_hardware_proto_rawDescGZIP(), []int{3, 2}
}

func (x *Hardware_Network) GetInterfaces() []*Hardware_Network_Interface {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

type Hardware_DHCP_IP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Netmask string `protobuf:"bytes,2,opt,name=netmask,proto3" json:"netmask,omitempty"`
	Gateway string `protobuf:"bytes,3,opt,name=gateway,proto3" json:"gateway,omitempty"`
	Family  int64  `protobuf:"varint,4,opt,name=family,proto3" json:"family,omitempty"`
}

func (x *Hardware_DHCP_IP) Reset() {
	*x = Hardware_DHCP_IP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_hardware_hardware_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hardware_DHCP_IP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hardware_DHCP_IP) ProtoMessage() {}

func (x *Hardware_DHCP_IP) ProtoReflect() protoreflect.Message {
	mi := &file_protos_hardware_hardware_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hardware_DHCP_IP.ProtoReflect.Descriptor instead.
func (*Hardware_DHCP_IP) Descriptor() ([]byte, []int) {
	return file_protos_hardware_hardware_proto_rawDescGZIP(), []int{3, 0, 0}
}

func (x *Hardware_DHCP_IP) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Hardware_DHCP_IP) GetNetmask() string {
	if x != nil {
		return x.Netmask
	}
	return ""
}

func (x *Hardware_DHCP_IP) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *Hardware_DHCP_IP) GetFamily() int64 {
	if x != nil {
		return x.Family
	}
	return 0
}

//
// IPXE is the network boot firmware Tinkerbell uses to start the
// provisioning in the hardware
type Hardware_Netboot_IPXE struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// This is the location of the IPXE script
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	//
	Contents string `protobuf:"bytes,2,opt,name=contents,proto3" json:"contents,omitempty"`
}

func (x *Hardware_Netboot_IPXE) Reset() {
	*x = Hardware_Netboot_IPXE{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_hardware_hardware_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hardware_Netboot_IPXE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hardware_Netboot_IPXE) ProtoMessage() {}

func (x *Hardware_Netboot_IPXE) ProtoReflect() protoreflect.Message {
	mi := &file_protos_hardware_hardware_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hardware_Netboot_IPXE.ProtoReflect.Descriptor instead.
func (*Hardware_Netboot_IPXE) Descriptor() ([]byte, []int) {
	return file_protos_hardware_hardware_proto_rawDescGZIP(), []int{3, 1, 0}
}

func (x *Hardware_Netboot_IPXE) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Hardware_Netboot_IPXE) GetContents() string {
	if x != nil {
		return x.Contents
	}
	return ""
}

//
// Osie is the in memory operating system
type Hardware_Netboot_Osie struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseUrl string `protobuf:"bytes,1,opt,name=base_url,json=baseUrl,proto3" json:"base_url,omitempty"`
	Kernel  string `protobuf:"bytes,2,opt,name=kernel,proto3" json:"kernel,omitempty"`
	Initrd  string `protobuf:"bytes,3,opt,name=initrd,proto3" json:"initrd,omitempty"`
}

func (x *Hardware_Netboot_Osie) Reset() {
	*x = Hardware_Netboot_Osie{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_hardware_hardware_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hardware_Netboot_Osie) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hardware_Netboot_Osie) ProtoMessage() {}

func (x *Hardware_Netboot_Osie) ProtoReflect() protoreflect.Message {
	mi := &file_protos_hardware_hardware_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hardware_Netboot_Osie.ProtoReflect.Descriptor instead.
func (*Hardware_Netboot_Osie) Descriptor() ([]byte, []int) {
	return file_protos_hardware_hardware_proto_rawDescGZIP(), []int{3, 1, 1}
}

func (x *Hardware_Netboot_Osie) GetBaseUrl() string {
	if x != nil {
		return x.BaseUrl
	}
	return ""
}

func (x *Hardware_Netboot_Osie) GetKernel() string {
	if x != nil {
		return x.Kernel
	}
	return ""
}

func (x *Hardware_Netboot_Osie) GetInitrd() string {
	if x != nil {
		return x.Initrd
	}
	return ""
}

//
// Interface represents a single network interface in your hardware
type Hardware_Network_Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// DHCP configures the behavior of DHCP connection for your hardware.
	// IP you expect, gateway and netmask.
	Dhcp *Hardware_DHCP `protobuf:"bytes,1,opt,name=dhcp,proto3" json:"dhcp,omitempty"`
	//
	// Netboot pilots netbooting. You can select Osie, the in memory
	// operating system used during netbooting.
	Netboot *Hardware_Netboot `protobuf:"bytes,2,opt,name=netboot,proto3" json:"netboot,omitempty"`
}

func (x *Hardware_Network_Interface) Reset() {
	*x = Hardware_Network_Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_hardware_hardware_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hardware_Network_Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hardware_Network_Interface) ProtoMessage() {}

func (x *Hardware_Network_Interface) ProtoReflect() protoreflect.Message {
	mi := &file_protos_hardware_hardware_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hardware_Network_Interface.ProtoReflect.Descriptor instead.
func (*Hardware_Network_Interface) Descriptor() ([]byte, []int) {
	return file_protos_hardware_hardware_proto_rawDescGZIP(), []int{3, 2, 0}
}

func (x *Hardware_Network_Interface) GetDhcp() *Hardware_DHCP {
	if x != nil {
		return x.Dhcp
	}
	return nil
}

func (x *Hardware_Network_Interface) GetNetboot() *Hardware_Netboot {
	if x != nil {
		return x.Netboot
	}
	return nil
}

var File_protos_hardware_hardware_proto protoreflect.FileDescriptor

var file_protos_hardware_hardware_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x2f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x69, 0x6e,
	0x6b, 0x65, 0x72, 0x62, 0x65, 0x6c, 0x6c, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x57, 0x0a, 0x0b, 0x50, 0x75,
	0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x62, 0x65, 0x6c, 0x6c, 0x2e,
	0x74, 0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x68, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3e, 0x0a, 0x0a,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb7, 0x0a, 0x0a,
	0x08, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x12, 0x56, 0x0a, 0x07, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x62, 0x65,
	0x6c, 0x6c, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x68,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xa6, 0x03, 0x0a, 0x04, 0x44, 0x48, 0x43, 0x50,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x61, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x63, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x61, 0x72, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x65, 0x66, 0x69, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x75, 0x65, 0x66, 0x69, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x02, 0x69, 0x70,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x62, 0x65, 0x6c, 0x6c, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x68, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x44, 0x48, 0x43,
	0x50, 0x2e, 0x49, 0x50, 0x52, 0x02, 0x69, 0x70, 0x1a, 0x6a, 0x0a, 0x02, 0x49, 0x50, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x6d, 0x61,
	0x73, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08,
	0x1a, 0x8a, 0x03, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x62, 0x6f, 0x6f, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x78, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x78, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x12, 0x55, 0x0a, 0x04, 0x69, 0x70, 0x78, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x65, 0x72, 0x62, 0x65, 0x6c, 0x6c, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x62, 0x6f, 0x6f, 0x74, 0x2e, 0x49, 0x50, 0x58,
	0x45, 0x52, 0x04, 0x69, 0x70, 0x78, 0x65, 0x12, 0x55, 0x0a, 0x04, 0x6f, 0x73, 0x69, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x62, 0x65, 0x6c, 0x6c, 0x2e, 0x74, 0x69,
	0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x62,
	0x6f, 0x6f, 0x74, 0x2e, 0x4f, 0x73, 0x69, 0x65, 0x52, 0x04, 0x6f, 0x73, 0x69, 0x65, 0x1a, 0x34,
	0x0a, 0x04, 0x49, 0x50, 0x58, 0x45, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x1a, 0x51, 0x0a, 0x04, 0x4f, 0x73, 0x69, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x62, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6b, 0x65, 0x72, 0x6e, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x69, 0x6e, 0x69, 0x74, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x69, 0x6e, 0x69, 0x74, 0x72, 0x64, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x1a, 0xb8, 0x02,
	0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x66, 0x0a, 0x0a, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x65,
	0x72, 0x62, 0x65, 0x6c, 0x6c, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x1a, 0xb2, 0x01, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12,
	0x4d, 0x0a, 0x04, 0x64, 0x68, 0x63, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x65,
	0x72, 0x62, 0x65, 0x6c, 0x6c, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x44, 0x48, 0x43, 0x50, 0x52, 0x04, 0x64, 0x68, 0x63, 0x70, 0x12, 0x56,
	0x0a, 0x07, 0x6e, 0x65, 0x74, 0x62, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x69, 0x6e,
	0x6b, 0x65, 0x72, 0x62, 0x65, 0x6c, 0x6c, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x62, 0x6f, 0x6f, 0x74, 0x52, 0x07, 0x6e,
	0x65, 0x74, 0x62, 0x6f, 0x6f, 0x74, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02,
	0x10, 0x03, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04,
	0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05,
	0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x22, 0x1f, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x32, 0xfa, 0x07, 0x0a, 0x0f, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x04,
	0x50, 0x75, 0x73, 0x68, 0x12, 0x37, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x62, 0x65, 0x6c, 0x6c, 0x2e, 0x74, 0x69, 0x6e,
	0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x65,
	0x72, 0x62, 0x65, 0x6c, 0x6c, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x22, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x92, 0x01, 0x0a, 0x05, 0x42, 0x79,
	0x4d, 0x41, 0x43, 0x12, 0x36, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x62, 0x65, 0x6c, 0x6c, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x62,
	0x65, 0x6c, 0x6c, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x68,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2f, 0x6d, 0x61, 0x63, 0x3a, 0x01, 0x2a, 0x12, 0x90,
	0x01, 0x0a, 0x04, 0x42, 0x79, 0x49, 0x50, 0x12, 0x36, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x62, 0x65, 0x6c, 0x6c, 0x2e,
	0x74, 0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x68, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x34, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x69, 0x6e,
	0x6b, 0x65, 0x72, 0x62, 0x65, 0x6c, 0x6c, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f,
	0x76, 0x31, 0x2f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2f, 0x69, 0x70, 0x3a, 0x01,
	0x2a, 0x12, 0x8f, 0x01, 0x0a, 0x04, 0x42, 0x79, 0x49, 0x44, 0x12, 0x36, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x62, 0x65,
	0x6c, 0x6c, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x68,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x34, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x74, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x62, 0x65, 0x6c, 0x6c, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13,
	0x12, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x12, 0x86, 0x01, 0x0a, 0x03, 0x41, 0x6c, 0x6c, 0x12, 0x31, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x62,
	0x65, 0x6c, 0x6c, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x34,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x65, 0x72, 0x62, 0x65, 0x6c, 0x6c, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x76,
	0x31, 0x2f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x30, 0x01, 0x12, 0x81, 0x01, 0x0a,
	0x0f, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x36, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x69,
	0x6e, 0x6b, 0x65, 0x72, 0x62, 0x65, 0x6c, 0x6c, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x62, 0x65, 0x6c, 0x6c,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x68, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x30, 0x01,
	0x12, 0x91, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x39, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x62,
	0x65, 0x6c, 0x6c, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x62, 0x65, 0x6c, 0x6c, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x68, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x13, 0x2a, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x74, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x62, 0x65, 0x6c, 0x6c, 0x2f, 0x74, 0x69,
	0x6e, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_hardware_hardware_proto_rawDescOnce sync.Once
	file_protos_hardware_hardware_proto_rawDescData = file_protos_hardware_hardware_proto_rawDesc
)

func file_protos_hardware_hardware_proto_rawDescGZIP() []byte {
	file_protos_hardware_hardware_proto_rawDescOnce.Do(func() {
		file_protos_hardware_hardware_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_hardware_hardware_proto_rawDescData)
	})
	return file_protos_hardware_hardware_proto_rawDescData
}

var (
	file_protos_hardware_hardware_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
	file_protos_hardware_hardware_proto_goTypes  = []interface{}{
		(*PushRequest)(nil),                // 0: github.com.tinkerbell.tink.protos.hardware.PushRequest
		(*Empty)(nil),                      // 1: github.com.tinkerbell.tink.protos.hardware.Empty
		(*GetRequest)(nil),                 // 2: github.com.tinkerbell.tink.protos.hardware.GetRequest
		(*Hardware)(nil),                   // 3: github.com.tinkerbell.tink.protos.hardware.Hardware
		(*DeleteRequest)(nil),              // 4: github.com.tinkerbell.tink.protos.hardware.DeleteRequest
		(*Hardware_DHCP)(nil),              // 5: github.com.tinkerbell.tink.protos.hardware.Hardware.DHCP
		(*Hardware_Netboot)(nil),           // 6: github.com.tinkerbell.tink.protos.hardware.Hardware.Netboot
		(*Hardware_Network)(nil),           // 7: github.com.tinkerbell.tink.protos.hardware.Hardware.Network
		(*Hardware_DHCP_IP)(nil),           // 8: github.com.tinkerbell.tink.protos.hardware.Hardware.DHCP.IP
		(*Hardware_Netboot_IPXE)(nil),      // 9: github.com.tinkerbell.tink.protos.hardware.Hardware.Netboot.IPXE
		(*Hardware_Netboot_Osie)(nil),      // 10: github.com.tinkerbell.tink.protos.hardware.Hardware.Netboot.Osie
		(*Hardware_Network_Interface)(nil), // 11: github.com.tinkerbell.tink.protos.hardware.Hardware.Network.Interface
	}
)

var file_protos_hardware_hardware_proto_depIdxs = []int32{
	3,  // 0: github.com.tinkerbell.tink.protos.hardware.PushRequest.data:type_name -> github.com.tinkerbell.tink.protos.hardware.Hardware
	7,  // 1: github.com.tinkerbell.tink.protos.hardware.Hardware.network:type_name -> github.com.tinkerbell.tink.protos.hardware.Hardware.Network
	8,  // 2: github.com.tinkerbell.tink.protos.hardware.Hardware.DHCP.ip:type_name -> github.com.tinkerbell.tink.protos.hardware.Hardware.DHCP.IP
	9,  // 3: github.com.tinkerbell.tink.protos.hardware.Hardware.Netboot.ipxe:type_name -> github.com.tinkerbell.tink.protos.hardware.Hardware.Netboot.IPXE
	10, // 4: github.com.tinkerbell.tink.protos.hardware.Hardware.Netboot.osie:type_name -> github.com.tinkerbell.tink.protos.hardware.Hardware.Netboot.Osie
	11, // 5: github.com.tinkerbell.tink.protos.hardware.Hardware.Network.interfaces:type_name -> github.com.tinkerbell.tink.protos.hardware.Hardware.Network.Interface
	5,  // 6: github.com.tinkerbell.tink.protos.hardware.Hardware.Network.Interface.dhcp:type_name -> github.com.tinkerbell.tink.protos.hardware.Hardware.DHCP
	6,  // 7: github.com.tinkerbell.tink.protos.hardware.Hardware.Network.Interface.netboot:type_name -> github.com.tinkerbell.tink.protos.hardware.Hardware.Netboot
	0,  // 8: github.com.tinkerbell.tink.protos.hardware.HardwareService.Push:input_type -> github.com.tinkerbell.tink.protos.hardware.PushRequest
	2,  // 9: github.com.tinkerbell.tink.protos.hardware.HardwareService.ByMAC:input_type -> github.com.tinkerbell.tink.protos.hardware.GetRequest
	2,  // 10: github.com.tinkerbell.tink.protos.hardware.HardwareService.ByIP:input_type -> github.com.tinkerbell.tink.protos.hardware.GetRequest
	2,  // 11: github.com.tinkerbell.tink.protos.hardware.HardwareService.ByID:input_type -> github.com.tinkerbell.tink.protos.hardware.GetRequest
	1,  // 12: github.com.tinkerbell.tink.protos.hardware.HardwareService.All:input_type -> github.com.tinkerbell.tink.protos.hardware.Empty
	2,  // 13: github.com.tinkerbell.tink.protos.hardware.HardwareService.DeprecatedWatch:input_type -> github.com.tinkerbell.tink.protos.hardware.GetRequest
	4,  // 14: github.com.tinkerbell.tink.protos.hardware.HardwareService.Delete:input_type -> github.com.tinkerbell.tink.protos.hardware.DeleteRequest
	1,  // 15: github.com.tinkerbell.tink.protos.hardware.HardwareService.Push:output_type -> github.com.tinkerbell.tink.protos.hardware.Empty
	3,  // 16: github.com.tinkerbell.tink.protos.hardware.HardwareService.ByMAC:output_type -> github.com.tinkerbell.tink.protos.hardware.Hardware
	3,  // 17: github.com.tinkerbell.tink.protos.hardware.HardwareService.ByIP:output_type -> github.com.tinkerbell.tink.protos.hardware.Hardware
	3,  // 18: github.com.tinkerbell.tink.protos.hardware.HardwareService.ByID:output_type -> github.com.tinkerbell.tink.protos.hardware.Hardware
	3,  // 19: github.com.tinkerbell.tink.protos.hardware.HardwareService.All:output_type -> github.com.tinkerbell.tink.protos.hardware.Hardware
	3,  // 20: github.com.tinkerbell.tink.protos.hardware.HardwareService.DeprecatedWatch:output_type -> github.com.tinkerbell.tink.protos.hardware.Hardware
	1,  // 21: github.com.tinkerbell.tink.protos.hardware.HardwareService.Delete:output_type -> github.com.tinkerbell.tink.protos.hardware.Empty
	15, // [15:22] is the sub-list for method output_type
	8,  // [8:15] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_protos_hardware_hardware_proto_init() }
func file_protos_hardware_hardware_proto_init() {
	if File_protos_hardware_hardware_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_hardware_hardware_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_hardware_hardware_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_hardware_hardware_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_hardware_hardware_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hardware); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_hardware_hardware_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_hardware_hardware_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hardware_DHCP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_hardware_hardware_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hardware_Netboot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_hardware_hardware_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hardware_Network); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_hardware_hardware_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hardware_DHCP_IP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_hardware_hardware_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hardware_Netboot_IPXE); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_hardware_hardware_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hardware_Netboot_Osie); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_hardware_hardware_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hardware_Network_Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_hardware_hardware_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protos_hardware_hardware_proto_goTypes,
		DependencyIndexes: file_protos_hardware_hardware_proto_depIdxs,
		MessageInfos:      file_protos_hardware_hardware_proto_msgTypes,
	}.Build()
	File_protos_hardware_hardware_proto = out.File
	file_protos_hardware_hardware_proto_rawDesc = nil
	file_protos_hardware_hardware_proto_goTypes = nil
	file_protos_hardware_hardware_proto_depIdxs = nil
}
