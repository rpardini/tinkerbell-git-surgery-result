name: For each commit and PR
on:
  push:
    branches:
      - "*"
    tags-ignore:
      - "v*"
  pull_request:
env:
  CGO_ENABLED: 0

jobs:
  verify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: "1.18.5"

      - name: make verify
        run: make verify
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: "1.18.5"

      - name: Install nix
        uses: cachix/install-nix-action@v16
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Fetch Nix Packages
        run: nix-shell --run 'true'

      - name: Generate
        run: nix-shell --run 'make generate'

      - name: e2etest
        run: make e2etest-setup

      - name: go test
        run: make test

      - name: upload codecov
        run: bash <(curl -s https://codecov.io/bash)
  ci-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install nix
        uses: cachix/install-nix-action@v16
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Fetch Nix Packages
        run: nix-shell --run 'true'

      - name: Install gofumpt for ci-checks.sh
        run: make bin/gofumpt

      - run: PATH=$PWD/bin/:$PATH ./ci-checks.sh
  crosscompile:
    runs-on: ubuntu-latest
    needs:
      - ci-checks
      - test
      - verify
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: "1.18.5"

      - run: make crosscompile -j$(nproc)

      - name: Upload tink-cli binaries
        uses: actions/upload-artifact@v2
        with:
          name: tink-cli
          path: cmd/tink-cli/tink-cli-*

      - name: Upload tink-server binaries
        uses: actions/upload-artifact@v2
        with:
          name: tink-server
          path: cmd/tink-server/tink-server-*

      - name: Upload tink-worker binaries
        uses: actions/upload-artifact@v2
        with:
          name: tink-worker
          path: cmd/tink-worker/tink-worker-*

      - name: Upload virtual-worker binaries
        uses: actions/upload-artifact@v2
        with:
          name: virtual-worker
          path: cmd/virtual-worker/virtual-worker-*

      - name: Upload tink-controller binaries
        uses: actions/upload-artifact@v2
        with:
          name: tink-controller
          path: cmd/tink-controller/tink-controller-*
  docker-images:
    runs-on: ubuntu-latest
    needs:
      - crosscompile
    strategy:
      matrix:
        include:
          - repository: quay.io/tinkerbell/tink-cli
            binary: tink-cli

          - repository: quay.io/tinkerbell/tink
            binary: tink-server

          - repository: quay.io/tinkerbell/tink-worker
            binary: tink-worker

          - repository: quay.io/tinkerbell/tink-controller
            binary: tink-controller
    steps:
      - name: Docker Image Tag for Sha
        id: docker-image-tag
        run: |
          echo ::set-output name=tags::${{ matrix.repository }}:latest,${{ matrix.repository }}:sha-${GITHUB_SHA::8}

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to quay.io
        uses: docker/login-action@v1
        if: ${{ startsWith(github.ref, 'refs/heads/main') }}
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Download ${{ matrix.binary }} artifacts
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.binary}}
          path: cmd/${{ matrix.binary }}

      - name: Fix Permissions
        run: chmod +x cmd/${{ matrix.binary }}/${{ matrix.binary }}*

      - name: ${{ matrix.repository }}
        uses: docker/build-push-action@v2
        with:
          context: cmd/${{ matrix.binary }}/
          cache-from: type=registry,ref=${{ matrix.repository }}:latest
          push: ${{ startsWith(github.ref, 'refs/heads/main') }}
          tags: ${{ steps.docker-image-tag.outputs.tags }}
          platforms: linux/amd64,linux/arm64
