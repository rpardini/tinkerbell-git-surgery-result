// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package client

import (
	"net"
	"sync"
	"time"
)

// Ensure, that DiscovererMock does implement Discoverer.
// If this is not the case, regenerate this file with moq.
var _ Discoverer = &DiscovererMock{}

// DiscovererMock is a mock implementation of Discoverer.
//
//	func TestSomethingThatUsesDiscoverer(t *testing.T) {
//
//		// make and configure a mocked Discoverer
//		mockedDiscoverer := &DiscovererMock{
//			DNSServersFunc: func(mac net.HardwareAddr) []net.IP {
//				panic("mock out the DNSServers method")
//			},
//			GetIPFunc: func(addr net.HardwareAddr) IP {
//				panic("mock out the GetIP method")
//			},
//			GetMACFunc: func(ip net.IP) net.HardwareAddr {
//				panic("mock out the GetMAC method")
//			},
//			HardwareFunc: func() Hardware {
//				panic("mock out the Hardware method")
//			},
//			HostnameFunc: func() (string, error) {
//				panic("mock out the Hostname method")
//			},
//			InstanceFunc: func() *Instance {
//				panic("mock out the Instance method")
//			},
//			LeaseTimeFunc: func(mac net.HardwareAddr) time.Duration {
//				panic("mock out the LeaseTime method")
//			},
//			MACFunc: func() net.HardwareAddr {
//				panic("mock out the MAC method")
//			},
//			ModeFunc: func() string {
//				panic("mock out the Mode method")
//			},
//			SetMACFunc: func(mac net.HardwareAddr)  {
//				panic("mock out the SetMAC method")
//			},
//		}
//
//		// use mockedDiscoverer in code that requires Discoverer
//		// and then make assertions.
//
//	}
type DiscovererMock struct {
	// DNSServersFunc mocks the DNSServers method.
	DNSServersFunc func(mac net.HardwareAddr) []net.IP

	// GetIPFunc mocks the GetIP method.
	GetIPFunc func(addr net.HardwareAddr) IP

	// GetMACFunc mocks the GetMAC method.
	GetMACFunc func(ip net.IP) net.HardwareAddr

	// HardwareFunc mocks the Hardware method.
	HardwareFunc func() Hardware

	// HostnameFunc mocks the Hostname method.
	HostnameFunc func() (string, error)

	// InstanceFunc mocks the Instance method.
	InstanceFunc func() *Instance

	// LeaseTimeFunc mocks the LeaseTime method.
	LeaseTimeFunc func(mac net.HardwareAddr) time.Duration

	// MACFunc mocks the MAC method.
	MACFunc func() net.HardwareAddr

	// ModeFunc mocks the Mode method.
	ModeFunc func() string

	// SetMACFunc mocks the SetMAC method.
	SetMACFunc func(mac net.HardwareAddr)

	// calls tracks calls to the methods.
	calls struct {
		// DNSServers holds details about calls to the DNSServers method.
		DNSServers []struct {
			// Mac is the mac argument value.
			Mac net.HardwareAddr
		}
		// GetIP holds details about calls to the GetIP method.
		GetIP []struct {
			// Addr is the addr argument value.
			Addr net.HardwareAddr
		}
		// GetMAC holds details about calls to the GetMAC method.
		GetMAC []struct {
			// IP is the ip argument value.
			IP net.IP
		}
		// Hardware holds details about calls to the Hardware method.
		Hardware []struct {
		}
		// Hostname holds details about calls to the Hostname method.
		Hostname []struct {
		}
		// Instance holds details about calls to the Instance method.
		Instance []struct {
		}
		// LeaseTime holds details about calls to the LeaseTime method.
		LeaseTime []struct {
			// Mac is the mac argument value.
			Mac net.HardwareAddr
		}
		// MAC holds details about calls to the MAC method.
		MAC []struct {
		}
		// Mode holds details about calls to the Mode method.
		Mode []struct {
		}
		// SetMAC holds details about calls to the SetMAC method.
		SetMAC []struct {
			// Mac is the mac argument value.
			Mac net.HardwareAddr
		}
	}
	lockDNSServers sync.RWMutex
	lockGetIP      sync.RWMutex
	lockGetMAC     sync.RWMutex
	lockHardware   sync.RWMutex
	lockHostname   sync.RWMutex
	lockInstance   sync.RWMutex
	lockLeaseTime  sync.RWMutex
	lockMAC        sync.RWMutex
	lockMode       sync.RWMutex
	lockSetMAC     sync.RWMutex
}

// DNSServers calls DNSServersFunc.
func (mock *DiscovererMock) DNSServers(mac net.HardwareAddr) []net.IP {
	callInfo := struct {
		Mac net.HardwareAddr
	}{
		Mac: mac,
	}
	mock.lockDNSServers.Lock()
	mock.calls.DNSServers = append(mock.calls.DNSServers, callInfo)
	mock.lockDNSServers.Unlock()
	if mock.DNSServersFunc == nil {
		var (
			iPsOut []net.IP
		)
		return iPsOut
	}
	return mock.DNSServersFunc(mac)
}

// DNSServersCalls gets all the calls that were made to DNSServers.
// Check the length with:
//
//	len(mockedDiscoverer.DNSServersCalls())
func (mock *DiscovererMock) DNSServersCalls() []struct {
	Mac net.HardwareAddr
} {
	var calls []struct {
		Mac net.HardwareAddr
	}
	mock.lockDNSServers.RLock()
	calls = mock.calls.DNSServers
	mock.lockDNSServers.RUnlock()
	return calls
}

// GetIP calls GetIPFunc.
func (mock *DiscovererMock) GetIP(addr net.HardwareAddr) IP {
	callInfo := struct {
		Addr net.HardwareAddr
	}{
		Addr: addr,
	}
	mock.lockGetIP.Lock()
	mock.calls.GetIP = append(mock.calls.GetIP, callInfo)
	mock.lockGetIP.Unlock()
	if mock.GetIPFunc == nil {
		var (
			iPOut IP
		)
		return iPOut
	}
	return mock.GetIPFunc(addr)
}

// GetIPCalls gets all the calls that were made to GetIP.
// Check the length with:
//
//	len(mockedDiscoverer.GetIPCalls())
func (mock *DiscovererMock) GetIPCalls() []struct {
	Addr net.HardwareAddr
} {
	var calls []struct {
		Addr net.HardwareAddr
	}
	mock.lockGetIP.RLock()
	calls = mock.calls.GetIP
	mock.lockGetIP.RUnlock()
	return calls
}

// GetMAC calls GetMACFunc.
func (mock *DiscovererMock) GetMAC(ip net.IP) net.HardwareAddr {
	callInfo := struct {
		IP net.IP
	}{
		IP: ip,
	}
	mock.lockGetMAC.Lock()
	mock.calls.GetMAC = append(mock.calls.GetMAC, callInfo)
	mock.lockGetMAC.Unlock()
	if mock.GetMACFunc == nil {
		var (
			hardwareAddrOut net.HardwareAddr
		)
		return hardwareAddrOut
	}
	return mock.GetMACFunc(ip)
}

// GetMACCalls gets all the calls that were made to GetMAC.
// Check the length with:
//
//	len(mockedDiscoverer.GetMACCalls())
func (mock *DiscovererMock) GetMACCalls() []struct {
	IP net.IP
} {
	var calls []struct {
		IP net.IP
	}
	mock.lockGetMAC.RLock()
	calls = mock.calls.GetMAC
	mock.lockGetMAC.RUnlock()
	return calls
}

// Hardware calls HardwareFunc.
func (mock *DiscovererMock) Hardware() Hardware {
	callInfo := struct {
	}{}
	mock.lockHardware.Lock()
	mock.calls.Hardware = append(mock.calls.Hardware, callInfo)
	mock.lockHardware.Unlock()
	if mock.HardwareFunc == nil {
		var (
			hardwareOut Hardware
		)
		return hardwareOut
	}
	return mock.HardwareFunc()
}

// HardwareCalls gets all the calls that were made to Hardware.
// Check the length with:
//
//	len(mockedDiscoverer.HardwareCalls())
func (mock *DiscovererMock) HardwareCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockHardware.RLock()
	calls = mock.calls.Hardware
	mock.lockHardware.RUnlock()
	return calls
}

// Hostname calls HostnameFunc.
func (mock *DiscovererMock) Hostname() (string, error) {
	callInfo := struct {
	}{}
	mock.lockHostname.Lock()
	mock.calls.Hostname = append(mock.calls.Hostname, callInfo)
	mock.lockHostname.Unlock()
	if mock.HostnameFunc == nil {
		var (
			sOut   string
			errOut error
		)
		return sOut, errOut
	}
	return mock.HostnameFunc()
}

// HostnameCalls gets all the calls that were made to Hostname.
// Check the length with:
//
//	len(mockedDiscoverer.HostnameCalls())
func (mock *DiscovererMock) HostnameCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockHostname.RLock()
	calls = mock.calls.Hostname
	mock.lockHostname.RUnlock()
	return calls
}

// Instance calls InstanceFunc.
func (mock *DiscovererMock) Instance() *Instance {
	callInfo := struct {
	}{}
	mock.lockInstance.Lock()
	mock.calls.Instance = append(mock.calls.Instance, callInfo)
	mock.lockInstance.Unlock()
	if mock.InstanceFunc == nil {
		var (
			instanceOut *Instance
		)
		return instanceOut
	}
	return mock.InstanceFunc()
}

// InstanceCalls gets all the calls that were made to Instance.
// Check the length with:
//
//	len(mockedDiscoverer.InstanceCalls())
func (mock *DiscovererMock) InstanceCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockInstance.RLock()
	calls = mock.calls.Instance
	mock.lockInstance.RUnlock()
	return calls
}

// LeaseTime calls LeaseTimeFunc.
func (mock *DiscovererMock) LeaseTime(mac net.HardwareAddr) time.Duration {
	callInfo := struct {
		Mac net.HardwareAddr
	}{
		Mac: mac,
	}
	mock.lockLeaseTime.Lock()
	mock.calls.LeaseTime = append(mock.calls.LeaseTime, callInfo)
	mock.lockLeaseTime.Unlock()
	if mock.LeaseTimeFunc == nil {
		var (
			durationOut time.Duration
		)
		return durationOut
	}
	return mock.LeaseTimeFunc(mac)
}

// LeaseTimeCalls gets all the calls that were made to LeaseTime.
// Check the length with:
//
//	len(mockedDiscoverer.LeaseTimeCalls())
func (mock *DiscovererMock) LeaseTimeCalls() []struct {
	Mac net.HardwareAddr
} {
	var calls []struct {
		Mac net.HardwareAddr
	}
	mock.lockLeaseTime.RLock()
	calls = mock.calls.LeaseTime
	mock.lockLeaseTime.RUnlock()
	return calls
}

// MAC calls MACFunc.
func (mock *DiscovererMock) MAC() net.HardwareAddr {
	callInfo := struct {
	}{}
	mock.lockMAC.Lock()
	mock.calls.MAC = append(mock.calls.MAC, callInfo)
	mock.lockMAC.Unlock()
	if mock.MACFunc == nil {
		var (
			hardwareAddrOut net.HardwareAddr
		)
		return hardwareAddrOut
	}
	return mock.MACFunc()
}

// MACCalls gets all the calls that were made to MAC.
// Check the length with:
//
//	len(mockedDiscoverer.MACCalls())
func (mock *DiscovererMock) MACCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockMAC.RLock()
	calls = mock.calls.MAC
	mock.lockMAC.RUnlock()
	return calls
}

// Mode calls ModeFunc.
func (mock *DiscovererMock) Mode() string {
	callInfo := struct {
	}{}
	mock.lockMode.Lock()
	mock.calls.Mode = append(mock.calls.Mode, callInfo)
	mock.lockMode.Unlock()
	if mock.ModeFunc == nil {
		var (
			sOut string
		)
		return sOut
	}
	return mock.ModeFunc()
}

// ModeCalls gets all the calls that were made to Mode.
// Check the length with:
//
//	len(mockedDiscoverer.ModeCalls())
func (mock *DiscovererMock) ModeCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockMode.RLock()
	calls = mock.calls.Mode
	mock.lockMode.RUnlock()
	return calls
}

// SetMAC calls SetMACFunc.
func (mock *DiscovererMock) SetMAC(mac net.HardwareAddr) {
	callInfo := struct {
		Mac net.HardwareAddr
	}{
		Mac: mac,
	}
	mock.lockSetMAC.Lock()
	mock.calls.SetMAC = append(mock.calls.SetMAC, callInfo)
	mock.lockSetMAC.Unlock()
	if mock.SetMACFunc == nil {
		return
	}
	mock.SetMACFunc(mac)
}

// SetMACCalls gets all the calls that were made to SetMAC.
// Check the length with:
//
//	len(mockedDiscoverer.SetMACCalls())
func (mock *DiscovererMock) SetMACCalls() []struct {
	Mac net.HardwareAddr
} {
	var calls []struct {
		Mac net.HardwareAddr
	}
	mock.lockSetMAC.RLock()
	calls = mock.calls.SetMAC
	mock.lockSetMAC.RUnlock()
	return calls
}

// Ensure, that HardwareMock does implement Hardware.
// If this is not the case, regenerate this file with moq.
var _ Hardware = &HardwareMock{}

// HardwareMock is a mock implementation of Hardware.
//
//	func TestSomethingThatUsesHardware(t *testing.T) {
//
//		// make and configure a mocked Hardware
//		mockedHardware := &HardwareMock{
//			GetTraceparentFunc: func() string {
//				panic("mock out the GetTraceparent method")
//			},
//			GetVLANIDFunc: func(hardwareAddr net.HardwareAddr) string {
//				panic("mock out the GetVLANID method")
//			},
//			HardwareAllowPXEFunc: func(mac net.HardwareAddr) bool {
//				panic("mock out the HardwareAllowPXE method")
//			},
//			HardwareAllowWorkflowFunc: func(mac net.HardwareAddr) bool {
//				panic("mock out the HardwareAllowWorkflow method")
//			},
//			HardwareArchFunc: func(mac net.HardwareAddr) string {
//				panic("mock out the HardwareArch method")
//			},
//			HardwareBondingModeFunc: func() BondingMode {
//				panic("mock out the HardwareBondingMode method")
//			},
//			HardwareFacilityCodeFunc: func() string {
//				panic("mock out the HardwareFacilityCode method")
//			},
//			HardwareIDFunc: func() HardwareID {
//				panic("mock out the HardwareID method")
//			},
//			HardwareIPsFunc: func() []IP {
//				panic("mock out the HardwareIPs method")
//			},
//			HardwareManufacturerFunc: func() string {
//				panic("mock out the HardwareManufacturer method")
//			},
//			HardwareOSIEVersionFunc: func() string {
//				panic("mock out the HardwareOSIEVersion method")
//			},
//			HardwarePlanSlugFunc: func() string {
//				panic("mock out the HardwarePlanSlug method")
//			},
//			HardwarePlanVersionSlugFunc: func() string {
//				panic("mock out the HardwarePlanVersionSlug method")
//			},
//			HardwareProvisionerFunc: func() string {
//				panic("mock out the HardwareProvisioner method")
//			},
//			HardwareStateFunc: func() HardwareState {
//				panic("mock out the HardwareState method")
//			},
//			HardwareUEFIFunc: func(mac net.HardwareAddr) bool {
//				panic("mock out the HardwareUEFI method")
//			},
//			IPXEScriptFunc: func(mac net.HardwareAddr) string {
//				panic("mock out the IPXEScript method")
//			},
//			IPXEURLFunc: func(mac net.HardwareAddr) string {
//				panic("mock out the IPXEURL method")
//			},
//			InitrdPathFunc: func(mac net.HardwareAddr) string {
//				panic("mock out the InitrdPath method")
//			},
//			InterfacesFunc: func() []Port {
//				panic("mock out the Interfaces method")
//			},
//			KernelPathFunc: func(mac net.HardwareAddr) string {
//				panic("mock out the KernelPath method")
//			},
//			OSIEBaseURLFunc: func(mac net.HardwareAddr) string {
//				panic("mock out the OSIEBaseURL method")
//			},
//			OperatingSystemFunc: func() *OperatingSystem {
//				panic("mock out the OperatingSystem method")
//			},
//		}
//
//		// use mockedHardware in code that requires Hardware
//		// and then make assertions.
//
//	}
type HardwareMock struct {
	// GetTraceparentFunc mocks the GetTraceparent method.
	GetTraceparentFunc func() string

	// GetVLANIDFunc mocks the GetVLANID method.
	GetVLANIDFunc func(hardwareAddr net.HardwareAddr) string

	// HardwareAllowPXEFunc mocks the HardwareAllowPXE method.
	HardwareAllowPXEFunc func(mac net.HardwareAddr) bool

	// HardwareAllowWorkflowFunc mocks the HardwareAllowWorkflow method.
	HardwareAllowWorkflowFunc func(mac net.HardwareAddr) bool

	// HardwareArchFunc mocks the HardwareArch method.
	HardwareArchFunc func(mac net.HardwareAddr) string

	// HardwareBondingModeFunc mocks the HardwareBondingMode method.
	HardwareBondingModeFunc func() BondingMode

	// HardwareFacilityCodeFunc mocks the HardwareFacilityCode method.
	HardwareFacilityCodeFunc func() string

	// HardwareIDFunc mocks the HardwareID method.
	HardwareIDFunc func() HardwareID

	// HardwareIPsFunc mocks the HardwareIPs method.
	HardwareIPsFunc func() []IP

	// HardwareManufacturerFunc mocks the HardwareManufacturer method.
	HardwareManufacturerFunc func() string

	// HardwareOSIEVersionFunc mocks the HardwareOSIEVersion method.
	HardwareOSIEVersionFunc func() string

	// HardwarePlanSlugFunc mocks the HardwarePlanSlug method.
	HardwarePlanSlugFunc func() string

	// HardwarePlanVersionSlugFunc mocks the HardwarePlanVersionSlug method.
	HardwarePlanVersionSlugFunc func() string

	// HardwareProvisionerFunc mocks the HardwareProvisioner method.
	HardwareProvisionerFunc func() string

	// HardwareStateFunc mocks the HardwareState method.
	HardwareStateFunc func() HardwareState

	// HardwareUEFIFunc mocks the HardwareUEFI method.
	HardwareUEFIFunc func(mac net.HardwareAddr) bool

	// IPXEScriptFunc mocks the IPXEScript method.
	IPXEScriptFunc func(mac net.HardwareAddr) string

	// IPXEURLFunc mocks the IPXEURL method.
	IPXEURLFunc func(mac net.HardwareAddr) string

	// InitrdPathFunc mocks the InitrdPath method.
	InitrdPathFunc func(mac net.HardwareAddr) string

	// InterfacesFunc mocks the Interfaces method.
	InterfacesFunc func() []Port

	// KernelPathFunc mocks the KernelPath method.
	KernelPathFunc func(mac net.HardwareAddr) string

	// OSIEBaseURLFunc mocks the OSIEBaseURL method.
	OSIEBaseURLFunc func(mac net.HardwareAddr) string

	// OperatingSystemFunc mocks the OperatingSystem method.
	OperatingSystemFunc func() *OperatingSystem

	// calls tracks calls to the methods.
	calls struct {
		// GetTraceparent holds details about calls to the GetTraceparent method.
		GetTraceparent []struct {
		}
		// GetVLANID holds details about calls to the GetVLANID method.
		GetVLANID []struct {
			// HardwareAddr is the hardwareAddr argument value.
			HardwareAddr net.HardwareAddr
		}
		// HardwareAllowPXE holds details about calls to the HardwareAllowPXE method.
		HardwareAllowPXE []struct {
			// Mac is the mac argument value.
			Mac net.HardwareAddr
		}
		// HardwareAllowWorkflow holds details about calls to the HardwareAllowWorkflow method.
		HardwareAllowWorkflow []struct {
			// Mac is the mac argument value.
			Mac net.HardwareAddr
		}
		// HardwareArch holds details about calls to the HardwareArch method.
		HardwareArch []struct {
			// Mac is the mac argument value.
			Mac net.HardwareAddr
		}
		// HardwareBondingMode holds details about calls to the HardwareBondingMode method.
		HardwareBondingMode []struct {
		}
		// HardwareFacilityCode holds details about calls to the HardwareFacilityCode method.
		HardwareFacilityCode []struct {
		}
		// HardwareID holds details about calls to the HardwareID method.
		HardwareID []struct {
		}
		// HardwareIPs holds details about calls to the HardwareIPs method.
		HardwareIPs []struct {
		}
		// HardwareManufacturer holds details about calls to the HardwareManufacturer method.
		HardwareManufacturer []struct {
		}
		// HardwareOSIEVersion holds details about calls to the HardwareOSIEVersion method.
		HardwareOSIEVersion []struct {
		}
		// HardwarePlanSlug holds details about calls to the HardwarePlanSlug method.
		HardwarePlanSlug []struct {
		}
		// HardwarePlanVersionSlug holds details about calls to the HardwarePlanVersionSlug method.
		HardwarePlanVersionSlug []struct {
		}
		// HardwareProvisioner holds details about calls to the HardwareProvisioner method.
		HardwareProvisioner []struct {
		}
		// HardwareState holds details about calls to the HardwareState method.
		HardwareState []struct {
		}
		// HardwareUEFI holds details about calls to the HardwareUEFI method.
		HardwareUEFI []struct {
			// Mac is the mac argument value.
			Mac net.HardwareAddr
		}
		// IPXEScript holds details about calls to the IPXEScript method.
		IPXEScript []struct {
			// Mac is the mac argument value.
			Mac net.HardwareAddr
		}
		// IPXEURL holds details about calls to the IPXEURL method.
		IPXEURL []struct {
			// Mac is the mac argument value.
			Mac net.HardwareAddr
		}
		// InitrdPath holds details about calls to the InitrdPath method.
		InitrdPath []struct {
			// Mac is the mac argument value.
			Mac net.HardwareAddr
		}
		// Interfaces holds details about calls to the Interfaces method.
		Interfaces []struct {
		}
		// KernelPath holds details about calls to the KernelPath method.
		KernelPath []struct {
			// Mac is the mac argument value.
			Mac net.HardwareAddr
		}
		// OSIEBaseURL holds details about calls to the OSIEBaseURL method.
		OSIEBaseURL []struct {
			// Mac is the mac argument value.
			Mac net.HardwareAddr
		}
		// OperatingSystem holds details about calls to the OperatingSystem method.
		OperatingSystem []struct {
		}
	}
	lockGetTraceparent          sync.RWMutex
	lockGetVLANID               sync.RWMutex
	lockHardwareAllowPXE        sync.RWMutex
	lockHardwareAllowWorkflow   sync.RWMutex
	lockHardwareArch            sync.RWMutex
	lockHardwareBondingMode     sync.RWMutex
	lockHardwareFacilityCode    sync.RWMutex
	lockHardwareID              sync.RWMutex
	lockHardwareIPs             sync.RWMutex
	lockHardwareManufacturer    sync.RWMutex
	lockHardwareOSIEVersion     sync.RWMutex
	lockHardwarePlanSlug        sync.RWMutex
	lockHardwarePlanVersionSlug sync.RWMutex
	lockHardwareProvisioner     sync.RWMutex
	lockHardwareState           sync.RWMutex
	lockHardwareUEFI            sync.RWMutex
	lockIPXEScript              sync.RWMutex
	lockIPXEURL                 sync.RWMutex
	lockInitrdPath              sync.RWMutex
	lockInterfaces              sync.RWMutex
	lockKernelPath              sync.RWMutex
	lockOSIEBaseURL             sync.RWMutex
	lockOperatingSystem         sync.RWMutex
}

// GetTraceparent calls GetTraceparentFunc.
func (mock *HardwareMock) GetTraceparent() string {
	callInfo := struct {
	}{}
	mock.lockGetTraceparent.Lock()
	mock.calls.GetTraceparent = append(mock.calls.GetTraceparent, callInfo)
	mock.lockGetTraceparent.Unlock()
	if mock.GetTraceparentFunc == nil {
		var (
			sOut string
		)
		return sOut
	}
	return mock.GetTraceparentFunc()
}

// GetTraceparentCalls gets all the calls that were made to GetTraceparent.
// Check the length with:
//
//	len(mockedHardware.GetTraceparentCalls())
func (mock *HardwareMock) GetTraceparentCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetTraceparent.RLock()
	calls = mock.calls.GetTraceparent
	mock.lockGetTraceparent.RUnlock()
	return calls
}

// GetVLANID calls GetVLANIDFunc.
func (mock *HardwareMock) GetVLANID(hardwareAddr net.HardwareAddr) string {
	callInfo := struct {
		HardwareAddr net.HardwareAddr
	}{
		HardwareAddr: hardwareAddr,
	}
	mock.lockGetVLANID.Lock()
	mock.calls.GetVLANID = append(mock.calls.GetVLANID, callInfo)
	mock.lockGetVLANID.Unlock()
	if mock.GetVLANIDFunc == nil {
		var (
			sOut string
		)
		return sOut
	}
	return mock.GetVLANIDFunc(hardwareAddr)
}

// GetVLANIDCalls gets all the calls that were made to GetVLANID.
// Check the length with:
//
//	len(mockedHardware.GetVLANIDCalls())
func (mock *HardwareMock) GetVLANIDCalls() []struct {
	HardwareAddr net.HardwareAddr
} {
	var calls []struct {
		HardwareAddr net.HardwareAddr
	}
	mock.lockGetVLANID.RLock()
	calls = mock.calls.GetVLANID
	mock.lockGetVLANID.RUnlock()
	return calls
}

// HardwareAllowPXE calls HardwareAllowPXEFunc.
func (mock *HardwareMock) HardwareAllowPXE(mac net.HardwareAddr) bool {
	callInfo := struct {
		Mac net.HardwareAddr
	}{
		Mac: mac,
	}
	mock.lockHardwareAllowPXE.Lock()
	mock.calls.HardwareAllowPXE = append(mock.calls.HardwareAllowPXE, callInfo)
	mock.lockHardwareAllowPXE.Unlock()
	if mock.HardwareAllowPXEFunc == nil {
		var (
			bOut bool
		)
		return bOut
	}
	return mock.HardwareAllowPXEFunc(mac)
}

// HardwareAllowPXECalls gets all the calls that were made to HardwareAllowPXE.
// Check the length with:
//
//	len(mockedHardware.HardwareAllowPXECalls())
func (mock *HardwareMock) HardwareAllowPXECalls() []struct {
	Mac net.HardwareAddr
} {
	var calls []struct {
		Mac net.HardwareAddr
	}
	mock.lockHardwareAllowPXE.RLock()
	calls = mock.calls.HardwareAllowPXE
	mock.lockHardwareAllowPXE.RUnlock()
	return calls
}

// HardwareAllowWorkflow calls HardwareAllowWorkflowFunc.
func (mock *HardwareMock) HardwareAllowWorkflow(mac net.HardwareAddr) bool {
	callInfo := struct {
		Mac net.HardwareAddr
	}{
		Mac: mac,
	}
	mock.lockHardwareAllowWorkflow.Lock()
	mock.calls.HardwareAllowWorkflow = append(mock.calls.HardwareAllowWorkflow, callInfo)
	mock.lockHardwareAllowWorkflow.Unlock()
	if mock.HardwareAllowWorkflowFunc == nil {
		var (
			bOut bool
		)
		return bOut
	}
	return mock.HardwareAllowWorkflowFunc(mac)
}

// HardwareAllowWorkflowCalls gets all the calls that were made to HardwareAllowWorkflow.
// Check the length with:
//
//	len(mockedHardware.HardwareAllowWorkflowCalls())
func (mock *HardwareMock) HardwareAllowWorkflowCalls() []struct {
	Mac net.HardwareAddr
} {
	var calls []struct {
		Mac net.HardwareAddr
	}
	mock.lockHardwareAllowWorkflow.RLock()
	calls = mock.calls.HardwareAllowWorkflow
	mock.lockHardwareAllowWorkflow.RUnlock()
	return calls
}

// HardwareArch calls HardwareArchFunc.
func (mock *HardwareMock) HardwareArch(mac net.HardwareAddr) string {
	callInfo := struct {
		Mac net.HardwareAddr
	}{
		Mac: mac,
	}
	mock.lockHardwareArch.Lock()
	mock.calls.HardwareArch = append(mock.calls.HardwareArch, callInfo)
	mock.lockHardwareArch.Unlock()
	if mock.HardwareArchFunc == nil {
		var (
			sOut string
		)
		return sOut
	}
	return mock.HardwareArchFunc(mac)
}

// HardwareArchCalls gets all the calls that were made to HardwareArch.
// Check the length with:
//
//	len(mockedHardware.HardwareArchCalls())
func (mock *HardwareMock) HardwareArchCalls() []struct {
	Mac net.HardwareAddr
} {
	var calls []struct {
		Mac net.HardwareAddr
	}
	mock.lockHardwareArch.RLock()
	calls = mock.calls.HardwareArch
	mock.lockHardwareArch.RUnlock()
	return calls
}

// HardwareBondingMode calls HardwareBondingModeFunc.
func (mock *HardwareMock) HardwareBondingMode() BondingMode {
	callInfo := struct {
	}{}
	mock.lockHardwareBondingMode.Lock()
	mock.calls.HardwareBondingMode = append(mock.calls.HardwareBondingMode, callInfo)
	mock.lockHardwareBondingMode.Unlock()
	if mock.HardwareBondingModeFunc == nil {
		var (
			bondingModeOut BondingMode
		)
		return bondingModeOut
	}
	return mock.HardwareBondingModeFunc()
}

// HardwareBondingModeCalls gets all the calls that were made to HardwareBondingMode.
// Check the length with:
//
//	len(mockedHardware.HardwareBondingModeCalls())
func (mock *HardwareMock) HardwareBondingModeCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockHardwareBondingMode.RLock()
	calls = mock.calls.HardwareBondingMode
	mock.lockHardwareBondingMode.RUnlock()
	return calls
}

// HardwareFacilityCode calls HardwareFacilityCodeFunc.
func (mock *HardwareMock) HardwareFacilityCode() string {
	callInfo := struct {
	}{}
	mock.lockHardwareFacilityCode.Lock()
	mock.calls.HardwareFacilityCode = append(mock.calls.HardwareFacilityCode, callInfo)
	mock.lockHardwareFacilityCode.Unlock()
	if mock.HardwareFacilityCodeFunc == nil {
		var (
			sOut string
		)
		return sOut
	}
	return mock.HardwareFacilityCodeFunc()
}

// HardwareFacilityCodeCalls gets all the calls that were made to HardwareFacilityCode.
// Check the length with:
//
//	len(mockedHardware.HardwareFacilityCodeCalls())
func (mock *HardwareMock) HardwareFacilityCodeCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockHardwareFacilityCode.RLock()
	calls = mock.calls.HardwareFacilityCode
	mock.lockHardwareFacilityCode.RUnlock()
	return calls
}

// HardwareID calls HardwareIDFunc.
func (mock *HardwareMock) HardwareID() HardwareID {
	callInfo := struct {
	}{}
	mock.lockHardwareID.Lock()
	mock.calls.HardwareID = append(mock.calls.HardwareID, callInfo)
	mock.lockHardwareID.Unlock()
	if mock.HardwareIDFunc == nil {
		var (
			hardwareIDOut HardwareID
		)
		return hardwareIDOut
	}
	return mock.HardwareIDFunc()
}

// HardwareIDCalls gets all the calls that were made to HardwareID.
// Check the length with:
//
//	len(mockedHardware.HardwareIDCalls())
func (mock *HardwareMock) HardwareIDCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockHardwareID.RLock()
	calls = mock.calls.HardwareID
	mock.lockHardwareID.RUnlock()
	return calls
}

// HardwareIPs calls HardwareIPsFunc.
func (mock *HardwareMock) HardwareIPs() []IP {
	callInfo := struct {
	}{}
	mock.lockHardwareIPs.Lock()
	mock.calls.HardwareIPs = append(mock.calls.HardwareIPs, callInfo)
	mock.lockHardwareIPs.Unlock()
	if mock.HardwareIPsFunc == nil {
		var (
			iPsOut []IP
		)
		return iPsOut
	}
	return mock.HardwareIPsFunc()
}

// HardwareIPsCalls gets all the calls that were made to HardwareIPs.
// Check the length with:
//
//	len(mockedHardware.HardwareIPsCalls())
func (mock *HardwareMock) HardwareIPsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockHardwareIPs.RLock()
	calls = mock.calls.HardwareIPs
	mock.lockHardwareIPs.RUnlock()
	return calls
}

// HardwareManufacturer calls HardwareManufacturerFunc.
func (mock *HardwareMock) HardwareManufacturer() string {
	callInfo := struct {
	}{}
	mock.lockHardwareManufacturer.Lock()
	mock.calls.HardwareManufacturer = append(mock.calls.HardwareManufacturer, callInfo)
	mock.lockHardwareManufacturer.Unlock()
	if mock.HardwareManufacturerFunc == nil {
		var (
			sOut string
		)
		return sOut
	}
	return mock.HardwareManufacturerFunc()
}

// HardwareManufacturerCalls gets all the calls that were made to HardwareManufacturer.
// Check the length with:
//
//	len(mockedHardware.HardwareManufacturerCalls())
func (mock *HardwareMock) HardwareManufacturerCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockHardwareManufacturer.RLock()
	calls = mock.calls.HardwareManufacturer
	mock.lockHardwareManufacturer.RUnlock()
	return calls
}

// HardwareOSIEVersion calls HardwareOSIEVersionFunc.
func (mock *HardwareMock) HardwareOSIEVersion() string {
	callInfo := struct {
	}{}
	mock.lockHardwareOSIEVersion.Lock()
	mock.calls.HardwareOSIEVersion = append(mock.calls.HardwareOSIEVersion, callInfo)
	mock.lockHardwareOSIEVersion.Unlock()
	if mock.HardwareOSIEVersionFunc == nil {
		var (
			sOut string
		)
		return sOut
	}
	return mock.HardwareOSIEVersionFunc()
}

// HardwareOSIEVersionCalls gets all the calls that were made to HardwareOSIEVersion.
// Check the length with:
//
//	len(mockedHardware.HardwareOSIEVersionCalls())
func (mock *HardwareMock) HardwareOSIEVersionCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockHardwareOSIEVersion.RLock()
	calls = mock.calls.HardwareOSIEVersion
	mock.lockHardwareOSIEVersion.RUnlock()
	return calls
}

// HardwarePlanSlug calls HardwarePlanSlugFunc.
func (mock *HardwareMock) HardwarePlanSlug() string {
	callInfo := struct {
	}{}
	mock.lockHardwarePlanSlug.Lock()
	mock.calls.HardwarePlanSlug = append(mock.calls.HardwarePlanSlug, callInfo)
	mock.lockHardwarePlanSlug.Unlock()
	if mock.HardwarePlanSlugFunc == nil {
		var (
			sOut string
		)
		return sOut
	}
	return mock.HardwarePlanSlugFunc()
}

// HardwarePlanSlugCalls gets all the calls that were made to HardwarePlanSlug.
// Check the length with:
//
//	len(mockedHardware.HardwarePlanSlugCalls())
func (mock *HardwareMock) HardwarePlanSlugCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockHardwarePlanSlug.RLock()
	calls = mock.calls.HardwarePlanSlug
	mock.lockHardwarePlanSlug.RUnlock()
	return calls
}

// HardwarePlanVersionSlug calls HardwarePlanVersionSlugFunc.
func (mock *HardwareMock) HardwarePlanVersionSlug() string {
	callInfo := struct {
	}{}
	mock.lockHardwarePlanVersionSlug.Lock()
	mock.calls.HardwarePlanVersionSlug = append(mock.calls.HardwarePlanVersionSlug, callInfo)
	mock.lockHardwarePlanVersionSlug.Unlock()
	if mock.HardwarePlanVersionSlugFunc == nil {
		var (
			sOut string
		)
		return sOut
	}
	return mock.HardwarePlanVersionSlugFunc()
}

// HardwarePlanVersionSlugCalls gets all the calls that were made to HardwarePlanVersionSlug.
// Check the length with:
//
//	len(mockedHardware.HardwarePlanVersionSlugCalls())
func (mock *HardwareMock) HardwarePlanVersionSlugCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockHardwarePlanVersionSlug.RLock()
	calls = mock.calls.HardwarePlanVersionSlug
	mock.lockHardwarePlanVersionSlug.RUnlock()
	return calls
}

// HardwareProvisioner calls HardwareProvisionerFunc.
func (mock *HardwareMock) HardwareProvisioner() string {
	callInfo := struct {
	}{}
	mock.lockHardwareProvisioner.Lock()
	mock.calls.HardwareProvisioner = append(mock.calls.HardwareProvisioner, callInfo)
	mock.lockHardwareProvisioner.Unlock()
	if mock.HardwareProvisionerFunc == nil {
		var (
			sOut string
		)
		return sOut
	}
	return mock.HardwareProvisionerFunc()
}

// HardwareProvisionerCalls gets all the calls that were made to HardwareProvisioner.
// Check the length with:
//
//	len(mockedHardware.HardwareProvisionerCalls())
func (mock *HardwareMock) HardwareProvisionerCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockHardwareProvisioner.RLock()
	calls = mock.calls.HardwareProvisioner
	mock.lockHardwareProvisioner.RUnlock()
	return calls
}

// HardwareState calls HardwareStateFunc.
func (mock *HardwareMock) HardwareState() HardwareState {
	callInfo := struct {
	}{}
	mock.lockHardwareState.Lock()
	mock.calls.HardwareState = append(mock.calls.HardwareState, callInfo)
	mock.lockHardwareState.Unlock()
	if mock.HardwareStateFunc == nil {
		var (
			hardwareStateOut HardwareState
		)
		return hardwareStateOut
	}
	return mock.HardwareStateFunc()
}

// HardwareStateCalls gets all the calls that were made to HardwareState.
// Check the length with:
//
//	len(mockedHardware.HardwareStateCalls())
func (mock *HardwareMock) HardwareStateCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockHardwareState.RLock()
	calls = mock.calls.HardwareState
	mock.lockHardwareState.RUnlock()
	return calls
}

// HardwareUEFI calls HardwareUEFIFunc.
func (mock *HardwareMock) HardwareUEFI(mac net.HardwareAddr) bool {
	callInfo := struct {
		Mac net.HardwareAddr
	}{
		Mac: mac,
	}
	mock.lockHardwareUEFI.Lock()
	mock.calls.HardwareUEFI = append(mock.calls.HardwareUEFI, callInfo)
	mock.lockHardwareUEFI.Unlock()
	if mock.HardwareUEFIFunc == nil {
		var (
			bOut bool
		)
		return bOut
	}
	return mock.HardwareUEFIFunc(mac)
}

// HardwareUEFICalls gets all the calls that were made to HardwareUEFI.
// Check the length with:
//
//	len(mockedHardware.HardwareUEFICalls())
func (mock *HardwareMock) HardwareUEFICalls() []struct {
	Mac net.HardwareAddr
} {
	var calls []struct {
		Mac net.HardwareAddr
	}
	mock.lockHardwareUEFI.RLock()
	calls = mock.calls.HardwareUEFI
	mock.lockHardwareUEFI.RUnlock()
	return calls
}

// IPXEScript calls IPXEScriptFunc.
func (mock *HardwareMock) IPXEScript(mac net.HardwareAddr) string {
	callInfo := struct {
		Mac net.HardwareAddr
	}{
		Mac: mac,
	}
	mock.lockIPXEScript.Lock()
	mock.calls.IPXEScript = append(mock.calls.IPXEScript, callInfo)
	mock.lockIPXEScript.Unlock()
	if mock.IPXEScriptFunc == nil {
		var (
			sOut string
		)
		return sOut
	}
	return mock.IPXEScriptFunc(mac)
}

// IPXEScriptCalls gets all the calls that were made to IPXEScript.
// Check the length with:
//
//	len(mockedHardware.IPXEScriptCalls())
func (mock *HardwareMock) IPXEScriptCalls() []struct {
	Mac net.HardwareAddr
} {
	var calls []struct {
		Mac net.HardwareAddr
	}
	mock.lockIPXEScript.RLock()
	calls = mock.calls.IPXEScript
	mock.lockIPXEScript.RUnlock()
	return calls
}

// IPXEURL calls IPXEURLFunc.
func (mock *HardwareMock) IPXEURL(mac net.HardwareAddr) string {
	callInfo := struct {
		Mac net.HardwareAddr
	}{
		Mac: mac,
	}
	mock.lockIPXEURL.Lock()
	mock.calls.IPXEURL = append(mock.calls.IPXEURL, callInfo)
	mock.lockIPXEURL.Unlock()
	if mock.IPXEURLFunc == nil {
		var (
			sOut string
		)
		return sOut
	}
	return mock.IPXEURLFunc(mac)
}

// IPXEURLCalls gets all the calls that were made to IPXEURL.
// Check the length with:
//
//	len(mockedHardware.IPXEURLCalls())
func (mock *HardwareMock) IPXEURLCalls() []struct {
	Mac net.HardwareAddr
} {
	var calls []struct {
		Mac net.HardwareAddr
	}
	mock.lockIPXEURL.RLock()
	calls = mock.calls.IPXEURL
	mock.lockIPXEURL.RUnlock()
	return calls
}

// InitrdPath calls InitrdPathFunc.
func (mock *HardwareMock) InitrdPath(mac net.HardwareAddr) string {
	callInfo := struct {
		Mac net.HardwareAddr
	}{
		Mac: mac,
	}
	mock.lockInitrdPath.Lock()
	mock.calls.InitrdPath = append(mock.calls.InitrdPath, callInfo)
	mock.lockInitrdPath.Unlock()
	if mock.InitrdPathFunc == nil {
		var (
			sOut string
		)
		return sOut
	}
	return mock.InitrdPathFunc(mac)
}

// InitrdPathCalls gets all the calls that were made to InitrdPath.
// Check the length with:
//
//	len(mockedHardware.InitrdPathCalls())
func (mock *HardwareMock) InitrdPathCalls() []struct {
	Mac net.HardwareAddr
} {
	var calls []struct {
		Mac net.HardwareAddr
	}
	mock.lockInitrdPath.RLock()
	calls = mock.calls.InitrdPath
	mock.lockInitrdPath.RUnlock()
	return calls
}

// Interfaces calls InterfacesFunc.
func (mock *HardwareMock) Interfaces() []Port {
	callInfo := struct {
	}{}
	mock.lockInterfaces.Lock()
	mock.calls.Interfaces = append(mock.calls.Interfaces, callInfo)
	mock.lockInterfaces.Unlock()
	if mock.InterfacesFunc == nil {
		var (
			portsOut []Port
		)
		return portsOut
	}
	return mock.InterfacesFunc()
}

// InterfacesCalls gets all the calls that were made to Interfaces.
// Check the length with:
//
//	len(mockedHardware.InterfacesCalls())
func (mock *HardwareMock) InterfacesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockInterfaces.RLock()
	calls = mock.calls.Interfaces
	mock.lockInterfaces.RUnlock()
	return calls
}

// KernelPath calls KernelPathFunc.
func (mock *HardwareMock) KernelPath(mac net.HardwareAddr) string {
	callInfo := struct {
		Mac net.HardwareAddr
	}{
		Mac: mac,
	}
	mock.lockKernelPath.Lock()
	mock.calls.KernelPath = append(mock.calls.KernelPath, callInfo)
	mock.lockKernelPath.Unlock()
	if mock.KernelPathFunc == nil {
		var (
			sOut string
		)
		return sOut
	}
	return mock.KernelPathFunc(mac)
}

// KernelPathCalls gets all the calls that were made to KernelPath.
// Check the length with:
//
//	len(mockedHardware.KernelPathCalls())
func (mock *HardwareMock) KernelPathCalls() []struct {
	Mac net.HardwareAddr
} {
	var calls []struct {
		Mac net.HardwareAddr
	}
	mock.lockKernelPath.RLock()
	calls = mock.calls.KernelPath
	mock.lockKernelPath.RUnlock()
	return calls
}

// OSIEBaseURL calls OSIEBaseURLFunc.
func (mock *HardwareMock) OSIEBaseURL(mac net.HardwareAddr) string {
	callInfo := struct {
		Mac net.HardwareAddr
	}{
		Mac: mac,
	}
	mock.lockOSIEBaseURL.Lock()
	mock.calls.OSIEBaseURL = append(mock.calls.OSIEBaseURL, callInfo)
	mock.lockOSIEBaseURL.Unlock()
	if mock.OSIEBaseURLFunc == nil {
		var (
			sOut string
		)
		return sOut
	}
	return mock.OSIEBaseURLFunc(mac)
}

// OSIEBaseURLCalls gets all the calls that were made to OSIEBaseURL.
// Check the length with:
//
//	len(mockedHardware.OSIEBaseURLCalls())
func (mock *HardwareMock) OSIEBaseURLCalls() []struct {
	Mac net.HardwareAddr
} {
	var calls []struct {
		Mac net.HardwareAddr
	}
	mock.lockOSIEBaseURL.RLock()
	calls = mock.calls.OSIEBaseURL
	mock.lockOSIEBaseURL.RUnlock()
	return calls
}

// OperatingSystem calls OperatingSystemFunc.
func (mock *HardwareMock) OperatingSystem() *OperatingSystem {
	callInfo := struct {
	}{}
	mock.lockOperatingSystem.Lock()
	mock.calls.OperatingSystem = append(mock.calls.OperatingSystem, callInfo)
	mock.lockOperatingSystem.Unlock()
	if mock.OperatingSystemFunc == nil {
		var (
			operatingSystemOut *OperatingSystem
		)
		return operatingSystemOut
	}
	return mock.OperatingSystemFunc()
}

// OperatingSystemCalls gets all the calls that were made to OperatingSystem.
// Check the length with:
//
//	len(mockedHardware.OperatingSystemCalls())
func (mock *HardwareMock) OperatingSystemCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockOperatingSystem.RLock()
	calls = mock.calls.OperatingSystem
	mock.lockOperatingSystem.RUnlock()
	return calls
}
